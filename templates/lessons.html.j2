<!-- lessons.html.j2 (Updated: Fixed subject filtering to be case-insensitive with .toLowerCase() matching; ensured filterBySubject is called in changeSubject without page reload (using history.replaceState); added initial filter application on load; restored back-to-home arrow icon and adjusted h1 to text-2xl for consistency. Preserved all sorting, scroll, and other logic.) -->
{% extends "base.html.j2" %}

{% block title %}Lessons - EduGrok{% endblock %}

{% set subject = request.args.get('subject', '') %}
{% set sort = request.args.get('sort', 'latest') %}

{% block content %}
<div class="bg-grok-bg border-b border-grok-border sticky top-0 z-50 transition-transform duration-300 ease-in-out w-full left-0" id="sticky-header">
    <div class="p-4 flex justify-between items-center">
        <div class="flex items-center space-x-3">
            <a href="{{ url_for('home') }}" class="text-grok-secondary hover:text-grok-accent">
                <i class="fas fa-arrow-left text-xl"></i>
            </a>
            <h1 class="text-xl font-bold text-grok-text">Lessons</h1>
        </div>
        <div class="flex items-center space-x-4">
            <!-- Student Selector -->
            <select id="kid-selector" class="bg-transparent border border-grok-border rounded text-grok-text px-2 py-1" onchange="changeKid(this.value)">
                <!-- Always prepend "My Feed" option -->
                <option value="{{ selected_user_id }}" {% if selected_user_id == session.user_id or not kids %}selected{% endif %}>
                    {% if lessons %}{{ lessons[0].grade }}{% else %}1{% endif %} - My Feed
                </option>
                {% if kids %}
                    {% for kid in kids %}
                        <option value="{{ kid.id }}" {% if kid.id == selected_kid_id %}selected{% endif %}>{{ kid.handle }} (Grade {{ kid.grade }})</option>
                    {% endfor %}
                {% endif %}
            </select>
            <!-- Subject Filter -->
            <select id="subject-select" class="bg-transparent border border-grok-border rounded text-grok-text px-2 py-1" onchange="changeSubject(this.value)">
                <option value="" {% if not subject %}selected{% endif %}>All</option>
                <option value="Math" {% if subject == 'Math' %}selected{% endif %}>Math</option>
                <option value="Language" {% if subject == 'Language' %}selected{% endif %}>Language</option>
                <option value="Science" {% if subject == 'Science' %}selected{% endif %}>Science</option>
                <option value="General" {% if subject == 'General' %}selected{% endif %}>General</option>
            </select>
        </div>
    </div>
</div>
<div class="container mx-auto p-6 max-w-4xl pt-4">
    {% if lessons %}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="lessons-grid">
            {% for lesson in lessons %}
                <div class="card bg-grok-surface border-grok-border p-5 rounded-xl shadow-lg border hover:-translate-y-1 hover:shadow-xl transition-all duration-200 max-w-lg mx-auto mb-6 {% if not lesson.completed %}sparkly-border{% else %}completed opacity-75 cursor-not-allowed{% endif %}" id="lesson-{{ lesson.id }}" data-subject="{{ lesson.subject }}" data-created-at="{{ lesson.created_at }}" data-title="{{ lesson.title }}" data-grade="{{ lesson.grade }}">
                    <!-- Lesson Header (mirrors post header) -->
                    <div class="flex items-center mb-3">
                        <div class="w-10 h-10 rounded-full bg-grok-accent text-grok-text flex items-center justify-center mr-3 font-bold text-sm shadow-sm">
                            L
                        </div>
                        <div class="flex-1">
                            <p class="text-grok-text font-semibold">{{ lesson.title }} (Grade {{ lesson.grade }})</p>
                            <p class="text-grok-secondary text-sm">{{ lesson.subject }} â€¢ {{ lesson.created_at }}</p>
                        </div>
                    </div>

                    <!-- Lesson Content (mirrors post content) -->
                    <p class="text-grok-text mb-4 prose prose-sm max-w-none">{{ lesson.description | safe }}</p>

                    <!-- Lesson Stats/Actions (simplified mirror of post stats/actions) -->
                    <div class="flex justify-between text-grok-secondary mb-4" style="font-size:70%;">
                        <span><i class="fas fa-eye mr-1"></i>Preview</span>
                        <span><i class="fas fa-book mr-1"></i>Learn</span>
                    </div>

                    <div class="flex justify-between border-t border-grok-border pt-3" style="font-size:80%;">
                        {% if lesson.completed %}
                            <span class="text-green-500 flex items-center"><i class="fas fa-check mr-1"></i> Completed</span>
                            <a href="{{ url_for('reset_lesson', lesson_id=lesson.id) }}" class="text-grok-secondary hover:text-grok-accent transition flex items-center">
                                <i class="fas fa-redo mr-1"></i> Reset
                            </a>
                        {% else %}
                            <a href="{{ url_for('complete_lesson', lesson_id=lesson.id) }}" class="text-grok-text hover:text-grok-accent transition flex items-center">
                                <i class="fas fa-play mr-1"></i> Start Lesson
                            </a>
                            {% if lesson.in_feed %}
                                <span class="text-green-500 flex items-center opacity-75 cursor-not-allowed">
                                    <i class="fas fa-check mr-1"></i> Added to Feed
                                </span>
                            {% else %}
                                <a href="#" onclick="addToFeed({{ lesson.id }}, {{ selected_user_id }})" class="text-grok-text hover:text-grok-accent transition flex items-center" id="add-btn-{{ lesson.id }}">
                                    <i class="fas fa-plus mr-1"></i> Add to Feed
                                </a>
                            {% endif %}
                        {% endif %}
                    </div>
                </div>
            {% endfor %}
        </div>
    {% else %}
        <div class="text-center py-8 card bg-grok-surface p-5 rounded-xl shadow-lg border border-grok-border max-w-lg mx-auto">
            <h2 class="text-2xl font-bold mb-4 text-grok-text">No Lessons Yet</h2>
            <p class="text-grok-secondary mb-6">Generate some lessons to get started!</p>
            <button onclick="generateLesson()" class="bg-grok-accent text-grok-text px-6 py-3 rounded-lg font-semibold hover:bg-grok-accent-hover transition shadow-md">Generate Lesson</button>
        </div>
    {% endif %}
</div>

<script>
    // Sticky header scroll hide/show logic (separate from base to avoid conflict)
    let headerLastScrollTop = 0;
    let headerTicking = false;
    const headerScrollThreshold = 10;

    function updateHeaderPosition() {
        let st = window.pageYOffset || document.documentElement.scrollTop;
        const delta = st - headerLastScrollTop;
        const isScrollingDown = delta > headerScrollThreshold;
        const isScrollingUp = delta < -headerScrollThreshold;

        const header = document.getElementById('sticky-header');
        if (header) {
            if (isScrollingDown) {
                header.style.transform = 'translateY(-100%)';
            } else if (isScrollingUp) {
                header.style.transform = 'translateY(0)';
            }
        }

        headerLastScrollTop = st <= 0 ? 0 : st;
        headerTicking = false;
    }

    window.addEventListener('scroll', () => {
        if (!headerTicking) {
            requestAnimationFrame(updateHeaderPosition);
            headerTicking = true;
        }
    });

    // Initial setup
    document.addEventListener('DOMContentLoaded', function() {
        const header = document.getElementById('sticky-header');
        if (header) {
            header.style.transform = 'translateY(0)';
        }
        setTimeout(() => {
            headerLastScrollTop = window.pageYOffset || document.documentElement.scrollTop;
        }, 100);
        updateHeaderPosition();

        // Apply initial sort
        const initialSort = '{{ sort }}';
        const sortSelect = document.getElementById('sort-select');
        if (sortSelect) {
            sortSelect.value = initialSort;
            sortLessons(initialSort);
        }

        // Apply initial subject filter
        const initialSubject = '{{ subject }}';
        const subjectSelect = document.getElementById('subject-select');
        if (subjectSelect) {
            subjectSelect.value = initialSubject;
            filterBySubject(initialSubject);
        }
    });

    function changeKid(kidId) {
        const url = new URL(window.location);
        if (kidId && kidId != '{{ selected_user_id }}') {  // Assume selected_user_id is own ID for My Feed
            url.searchParams.set('kid_id', kidId);
        } else {
            url.searchParams.delete('kid_id');
        }
        window.location.href = url.toString();
    }

    function changeSubject(subject) {
        // Update URL param for persistence/backend sync
        const url = new URL(window.location);
        if (subject) {
            url.searchParams.set('subject', subject);
        } else {
            url.searchParams.delete('subject');
        }
        history.replaceState({}, '', url.toString());

        // Client-side filtering
        filterBySubject(subject);
    }

    function filterBySubject(subject) {
        const cards = document.querySelectorAll('[id^="lesson-"]');
        cards.forEach(card => {
            const cardSubject = (card.getAttribute('data-subject') || '').trim();
            if (subject === '' || cardSubject.toLowerCase() === subject.toLowerCase()) {
                card.style.display = '';
            } else {
                card.style.display = 'none';
            }
        });
    }

    function changeSort(sortValue) {
        const url = new URL(window.location);
        url.searchParams.set('sort', sortValue);
        history.replaceState({}, '', url.toString());
        sortLessons(sortValue);
    }

    function sortLessons(sortValue) {
        const grid = document.getElementById('lessons-grid');
        if (!grid) return;
        const lessons = Array.from(grid.querySelectorAll('[id^="lesson-"]'));
        lessons.sort((a, b) => {
            try {
                if (sortValue === 'latest') {
                    const dateA = new Date(a.getAttribute('data-created-at') || '1970-01-01');
                    const dateB = new Date(b.getAttribute('data-created-at') || '1970-01-01');
                    return dateB - dateA; // Descending by date
                } else if (sortValue === 'title') {
                    const titleA = a.getAttribute('data-title') || '';
                    const titleB = b.getAttribute('data-title') || '';
                    return titleA.localeCompare(titleB); // Ascending by title
                } else if (sortValue === 'grade') {
                    const gradeA = parseInt(a.getAttribute('data-grade') || 1);
                    const gradeB = parseInt(b.getAttribute('data-grade') || 1);
                    return gradeA - gradeB; // Ascending by grade
                }
            } catch (e) {
                console.error('Sorting error:', e);
                return 0;
            }
        });
        grid.innerHTML = ''; // Clear container
        lessons.forEach(lesson => grid.appendChild(lesson)); // Re-append sorted lessons
    }

    async function handleFetch(fetchPromise, successMsg, errorMsg, callback) {
        try {
            const response = await fetchPromise;
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Fetch error:', errorText);
                alert(errorMsg || 'Request failed: ' + response.status);
                return;
            }
            const data = await response.json();
            if (data.success) {
                if (successMsg) alert(successMsg);
                if (callback) callback(data);
            } else {
                alert(data.error || errorMsg || 'Operation failed');
            }
        } catch (error) {
            console.error('Fetch error:', error);
            alert('Network error or invalid response. Please try again.');
        }
    }

    function addToFeed(lessonId, targetUserId) {
        const btn = document.getElementById('add-btn-' + lessonId);
        if (!btn || btn.disabled) return;
        btn.disabled = true;
        const originalText = btn.innerHTML;
        btn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Adding...';
        handleFetch(
            fetch('/add_to_feed', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({lesson_id: lessonId, target_user_id: targetUserId})
            }),
            'Lesson added to feed!',
            'Failed to add lesson',
            function(data) {
                if (data.message === 'Already in feed') {
                    btn.innerHTML = '<i class="fas fa-check mr-1"></i> Already Added';
                    btn.classList.add('text-green-500', 'opacity-75', 'cursor-not-allowed');
                } else {
                    btn.innerHTML = '<i class="fas fa-check mr-1"></i> Added to Feed';
                    btn.classList.add('text-green-500', 'opacity-75', 'cursor-not-allowed');
                    // Optional: reload to update list if needed, but avoid to prevent flash
                    // location.reload();
                }
            }
        );
    }

    function generateLesson() {
        handleFetch(
            fetch('/generate_lesson', {method: 'POST'}),
            'Lesson generated!',
            'Failed to generate lesson',
            function() {
                location.reload();
            }
        );
    }
</script>

<style>
/* Optional: Sparkly border if adding is_new logic later */
.sparkly-border {
    position: relative;
    border: 2px solid transparent;
    border-radius: 0.75rem;
}
.sparkly-border::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    border-radius: 0.75rem;
    background-size: 400%;
    animation: sparkle 5s linear infinite;
    z-index: -1;
}

@keyframes sparkle {
    0% { background-position: 0% 50%; }
    100% { background-position: 400% 50%; }
}

/* Visual disable for completed lessons */
.completed {
    opacity: 0.75;
    cursor: not-allowed;
}
</style>
{% endblock %}