<!-- lessons.html.j2 (Updated: Always show child selector dropdown for parents, even with no kids—prepends "My Feed" option using selected_user_id for solo parent use. When kids exist, "My Feed" is first option, followed by kids. Updated label to include grade from first lesson (or default 1). JS unchanged, as it already uses selected_user_id correctly. This prevents flow breakage and makes adding to own feed explicit. Preserved all styling, logic, and sparkly-border for incomplete lessons.) -->
{% extends "base.html.j2" %}

{% block title %}Lessons - EduGrok{% endblock %}

{% block content %}
<div class="container mx-auto p-6 max-w-4xl">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-grok-text">Your Lessons</h1>
        <!-- Always show selector for parents (inferred by presence of selected_user_id/kids); if no kids, only "My Feed" -->
        <div class="flex-1 max-w-xs mx-4">
            <label for="kid-selector" class="block text-grok-secondary font-medium mb-2 text-sm">Add to:</label>
            <select id="kid-selector" class="w-full p-3 border border-grok-border rounded-lg focus:outline-none focus:ring-2 focus:ring-grok-accent bg-transparent text-grok-text" onchange="changeKid(this.value)">
                <!-- Always prepend "My Feed" option -->
                <option value="{{ selected_user_id }}" {% if selected_user_id == session.user_id or not kids %}selected{% endif %}>
                    {% if lessons %}{{ lessons[0].grade }}{% else %}1{% endif %} - My Feed
                </option>
                {% if kids %}
                    {% for kid in kids %}
                        <option value="{{ kid.id }}" {% if kid.id == selected_kid_id %}selected{% endif %}>{{ kid.handle }} (Grade {{ kid.grade }})</option>
                    {% endfor %}
                {% endif %}
            </select>
        </div>
        <a href="{{ url_for('home') }}" class="text-grok-secondary hover:text-grok-accent">&larr; Back to Home</a>
    </div>
    {% if lessons %}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {% for lesson in lessons %}
                <div class="card bg-grok-surface border-grok-border p-5 rounded-xl shadow-lg border hover:-translate-y-1 hover:shadow-xl transition-all duration-200 max-w-lg mx-auto mb-6 {% if not lesson.completed %}sparkly-border{% else %}completed opacity-75 cursor-not-allowed{% endif %}" id="lesson-{{ lesson.id }}">
                    <!-- Lesson Header (mirrors post header) -->
                    <div class="flex items-center mb-3">
                        <div class="w-10 h-10 rounded-full bg-grok-accent text-grok-text flex items-center justify-center mr-3 font-bold text-sm shadow-sm">
                            L
                        </div>
                        <div class="flex-1">
                            <p class="text-grok-text font-semibold">{{ lesson.title }} (Grade {{ lesson.grade }})</p>
                            <p class="text-grok-secondary text-sm">{{ lesson.subject }} • {{ lesson.created_at }}</p>
                        </div>
                    </div>

                    <!-- Lesson Content (mirrors post content) -->
                    <p class="text-grok-text mb-4 prose prose-sm max-w-none">{{ lesson.description | safe }}</p>

                    <!-- Lesson Stats/Actions (simplified mirror of post stats/actions) -->
                    <div class="flex justify-between text-grok-secondary mb-4" style="font-size:70%;">
                        <span><i class="fas fa-eye mr-1"></i>Preview</span>
                        <span><i class="fas fa-book mr-1"></i>Learn</span>
                    </div>

                    <div class="flex justify-between border-t border-grok-border pt-3" style="font-size:80%;">
                        {% if lesson.completed %}
                            <span class="text-green-500 flex items-center"><i class="fas fa-check mr-1"></i> Completed</span>
                            <a href="{{ url_for('reset_lesson', lesson_id=lesson.id) }}" class="text-grok-secondary hover:text-grok-accent transition flex items-center">
                                <i class="fas fa-redo mr-1"></i> Reset
                            </a>
                        {% else %}
                            <a href="{{ url_for('complete_lesson', lesson_id=lesson.id) }}" class="text-grok-text hover:text-grok-accent transition flex items-center">
                                <i class="fas fa-play mr-1"></i> Start Lesson
                            </a>
                            {% if lesson.in_feed %}
                                <span class="text-green-500 flex items-center opacity-75 cursor-not-allowed">
                                    <i class="fas fa-check mr-1"></i> Added to Feed
                                </span>
                            {% else %}
                                <a href="#" onclick="addToFeed({{ lesson.id }}, {{ selected_user_id }})" class="text-grok-text hover:text-grok-accent transition flex items-center" id="add-btn-{{ lesson.id }}">
                                    <i class="fas fa-plus mr-1"></i> Add to Feed
                                </a>
                            {% endif %}
                        {% endif %}
                    </div>
                </div>
            {% endfor %}
        </div>
    {% else %}
        <div class="text-center py-8 card bg-grok-surface p-5 rounded-xl shadow-lg border border-grok-border max-w-lg mx-auto">
            <h2 class="text-2xl font-bold mb-4 text-grok-text">No Lessons Yet</h2>
            <p class="text-grok-secondary mb-6">Generate some lessons to get started!</p>
            <button onclick="generateLesson()" class="bg-grok-accent text-grok-text px-6 py-3 rounded-lg font-semibold hover:bg-grok-accent-hover transition shadow-md">Generate Lesson</button>
        </div>
    {% endif %}
</div>

<script>
    function changeKid(kidId) {
        if (kidId) {
            window.location.href = `/lessons?kid_id=${kidId}`;
        }
    }

    async function handleFetch(fetchPromise, successMsg, errorMsg, callback) {
        try {
            const response = await fetchPromise;
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Fetch error:', errorText);
                alert(errorMsg || 'Request failed: ' + response.status);
                return;
            }
            const data = await response.json();
            if (data.success) {
                if (successMsg) alert(successMsg);
                if (callback) callback(data);
            } else {
                alert(data.error || errorMsg || 'Operation failed');
            }
        } catch (error) {
            console.error('Fetch error:', error);
            alert('Network error or invalid response. Please try again.');
        }
    }

    function addToFeed(lessonId, targetUserId) {
        const btn = document.getElementById('add-btn-' + lessonId);
        if (!btn || btn.disabled) return;
        btn.disabled = true;
        const originalText = btn.innerHTML;
        btn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Adding...';
        handleFetch(
            fetch('/add_to_feed', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({lesson_id: lessonId, target_user_id: targetUserId})
            }),
            'Lesson added to feed!',
            'Failed to add lesson',
            function(data) {
                if (data.message === 'Already in feed') {
                    btn.innerHTML = '<i class="fas fa-check mr-1"></i> Already Added';
                    btn.classList.add('text-green-500', 'opacity-75', 'cursor-not-allowed');
                } else {
                    btn.innerHTML = '<i class="fas fa-check mr-1"></i> Added to Feed';
                    btn.classList.add('text-green-500', 'opacity-75', 'cursor-not-allowed');
                    // Optional: reload to update list if needed, but avoid to prevent flash
                    // location.reload();
                }
            }
        );
    }

    function generateLesson() {
        handleFetch(
            fetch('/generate_lesson', {method: 'POST'}),
            'Lesson generated!',
            'Failed to generate lesson',
            function() {
                location.reload();
            }
        );
    }
</script>

<style>
/* Optional: Sparkly border if adding is_new logic later */
.sparkly-border {
    position: relative;
    border: 2px solid transparent;
    border-radius: 0.75rem;
}
.sparkly-border::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    border-radius: 0.75rem;
    background-size: 400%;
    animation: sparkle 5s linear infinite;
    z-index: -1;
}

@keyframes sparkle {
    0% { background-position: 0% 50%; }
    100% { background-position: 400% 50%; }
}

/* Visual disable for completed lessons */
.completed {
    opacity: 0.75;
    cursor: not-allowed;
}
</style>
{% endblock %}