<!-- lessons.html.j2 (Fixed: Removed conditional 'is_new' to prevent Jinja attribute error if not in query. Added fallback for completed (default 0). Ensured all accesses safe with | default(0). Added back button for navigation. ) -->
{% extends "base.html.j2" %}

{% block title %}Lessons - EduGrok{% endblock %}

{% block content %}
<div class="container mx-auto p-6 max-w-4xl">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-grok-text">Your Lessons</h1>
        <a href="{{ url_for('home') }}" class="text-grok-secondary hover:text-grok-accent">&larr; Back to Home</a>
    </div>
    {% if lessons %}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {% for lesson in lessons %}
                <div class="card bg-grok-surface border-grok-border p-5 rounded-xl shadow-lg border hover:-translate-y-1 hover:shadow-xl transition-all duration-200 max-w-lg mx-auto mb-6" id="lesson-{{ lesson.id }}">
                    <!-- Lesson Header (mirrors post header) -->
                    <div class="flex items-center mb-3">
                        <div class="w-10 h-10 rounded-full bg-grok-accent text-grok-text flex items-center justify-center mr-3 font-bold text-sm shadow-sm">
                            L
                        </div>
                        <div class="flex-1">
                            <p class="text-grok-text font-semibold">{{ lesson.title }} (Grade {{ lesson.grade }})</p>
                            <p class="text-grok-secondary text-sm">{{ lesson.subject }} â€¢ {{ lesson.created_at }}</p>
                        </div>
                    </div>

                    <!-- Lesson Content (mirrors post content) -->
                    <p class="text-grok-text mb-4 prose prose-sm max-w-none">{{ lesson.description | safe }}</p>

                    <!-- Lesson Stats/Actions (simplified mirror of post stats/actions) -->
                    <div class="flex justify-between text-grok-secondary mb-4" style="font-size:70%;">
                        <span><i class="fas fa-eye mr-1"></i>Preview</span>
                        <span><i class="fas fa-book mr-1"></i>Learn</span>
                    </div>

                    <div class="flex justify-between border-t border-grok-border pt-3" style="font-size:80%;">
                        {% set completed = lesson.completed | default(0) %}
                        {% if not completed %}
                            <a href="{{ url_for('check_lesson', lesson_id=lesson.id) }}" class="text-grok-text hover:text-grok-accent transition flex items-center">
                                <i class="fas fa-play mr-1"></i> Start Lesson
                            </a>
                            <a href="#" onclick="addToFeed({{ lesson.id }})" class="text-grok-text hover:text-grok-accent transition flex items-center">
                                <i class="fas fa-plus mr-1"></i> Add to Feed
                            </a>
                        {% else %}
                            <span class="text-green-500 flex items-center"><i class="fas fa-check mr-1"></i> Completed</span>
                            <a href="{{ url_for('reset_lesson', lesson_id=lesson.id) }}" class="text-grok-secondary hover:text-grok-accent transition flex items-center">
                                <i class="fas fa-redo mr-1"></i> Reset
                            </a>
                        {% endif %}
                    </div>
                </div>
            {% endfor %}
        </div>
    {% else %}
        <div class="text-center py-8 card bg-grok-surface p-5 rounded-xl shadow-lg border border-grok-border max-w-lg mx-auto">
            <h2 class="text-2xl font-bold mb-4 text-grok-text">No Lessons Yet</h2>
            <p class="text-grok-secondary mb-6">Generate some lessons to get started!</p>
            <button onclick="generateLesson()" class="bg-grok-accent text-grok-text px-6 py-3 rounded-lg font-semibold hover:bg-grok-accent-hover transition shadow-md">Generate Lesson</button>
        </div>
    {% endif %}
</div>

<script>
    async function handleFetch(fetchPromise, successMsg, errorMsg) {
        try {
            const response = await fetchPromise;
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Fetch error:', errorText);
                alert(errorMsg || 'Request failed: ' + response.status);
                return;
            }
            const data = await response.json();
            if (data.success) {
                if (successMsg) alert(successMsg);
                location.reload();
            } else {
                alert(data.error || errorMsg || 'Operation failed');
            }
        } catch (error) {
            console.error('Fetch error:', error);
            alert('Network error or invalid response. Please try again.');
        }
    }

    function addToFeed(lessonId) {
        handleFetch(
            fetch('/add_to_feed', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({lesson_id: lessonId})
            }),
            'Lesson added to feed!',
            'Failed to add lesson'
        );
    }

    function generateLesson() {
        handleFetch(
            fetch('/generate_lesson', {method: 'POST'}),
            'Lesson generated!',
            'Failed to generate lesson'
        );
    }
</script>

<style>
/* Optional: Sparkly border if adding is_new logic later */
.sparkly-border {
    position: relative;
    border: 2px solid transparent;
    border-radius: 0.75rem;
}
.sparkly-border::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    border-radius: 0.75rem;
    background-size: 400%;
    animation: sparkle 5s linear infinite;
    z-index: -1;
}

@keyframes sparkle {
    0% { background-position: 0% 50%; }
    100% { background-position: 400% 50%; }
}
</style>
{% endblock %}