{% extends "base.html.j2" %}
{% block title %}Lessons - EduGrok{% endblock %}
{% block content %}
<div class="max-w-4xl mx-auto p-6">
    <h1 class="text-3xl font-bold mb-6 text-grok-text">Lessons (Grade {{ grade }}) ðŸ“š</h1>
    {% if available_lessons %}
        <div class="grid gap-4">
            {% for lesson in available_lessons %}
                <div class="lesson-card bg-grok-surface p-6 rounded-lg border border-grok-border">
                    <h2 class="text-xl font-semibold mb-2">{{ lesson.title or lesson.question }}</h2>
                    <p class="text-grok-secondary mb-4">{{ lesson.description or lesson.question }}</p>
                    <p class="mb-4"><strong>Question:</strong> {{ lesson.question }}</p>
                    <button onclick="addToFeed({{ lesson.id }})" class="btn-primary px-4 py-2 rounded hover:bg-gray-600 transition-colors">Add to Feed</button>
                </div>
            {% endfor %}
        </div>
    {% else %}
        <div class="text-center bg-grok-surface p-8 rounded-lg border border-grok-border">
            <h2 class="text-2xl font-bold mb-4">No Lessons Available for Your Grade</h2>
            <p class="text-grok-secondary mb-6">Try generating a new one or check back later!</p>
            <button onclick="generateLesson()" class="btn-primary px-6 py-3 rounded-lg text-lg">Generate Lesson</button>
        </div>
    {% endif %}
</div>
<script>
    async function handleFetch(fetchPromise, successMsg, errorMsg) {
        try {
            const response = await fetchPromise;
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Fetch error:', errorText);
                alert(errorMsg || 'Request failed: ' + response.status);
                return;
            }
            const data = await response.json();
            if (data.success) {
                if (successMsg) alert(successMsg);
                location.reload();
            } else {
                alert(data.error || errorMsg || 'Operation failed');
            }
        } catch (error) {
            console.error('Fetch error:', error);
            alert('Network error or invalid response. Please try again.');
        }
    }

    function addToFeed(lessonId) {
        handleFetch(
            fetch('/add_to_feed', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({lesson_id: lessonId})
            }),
            'Lesson added to feed!',
            'Failed to add lesson'
        );
    }

    function generateLesson() {
        handleFetch(
            fetch('/generate_lesson', {method: 'POST'}),
            'Lesson generated!',
            'Failed to generate lesson'
        );
    }
</script>
{% endblock %}