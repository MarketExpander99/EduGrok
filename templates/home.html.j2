<!-- home.html.j2 (Updated: Moved mobile FAB up to bottom-20 to avoid overlap with bottom nav; added hide FAB on openPostModal click; added MutationObserver to detect when post-form becomes hidden (on cancel or after submit reload) and show FAB again if on mobile. Preserved all existing scroll logic unchanged. Retained previous updates including sorting, notifications, and flash messages.) -->
{% extends "base.html.j2" %}
{% block title %}Home - EduGrok{% endblock %}
{% block content %}<div class="min-h-screen bg-grok-bg">
    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            {% for category, message in messages %}
                <div class="mb-4 p-4 rounded-lg border {% if category == 'error' %}border-red-400 bg-red-50 text-red-700{% elif category == 'success' %}border-green-400 bg-green-50 text-green-700{% else %}border-blue-400 bg-blue-50 text-blue-700{% endif %}" data-message-id="{{ message | e }}" id="flash-{{ loop.index }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endif %}
    {% endwith %}
    <div class="bg-grok-bg border-b border-grok-border sticky top-0 z-50 transition-transform duration-300 ease-in-out w-full left-0" id="sticky-header">
        <div class="p-4 flex justify-between items-center">
            <h1 class="text-xl font-bold text-grok-text">Home Feed</h1>
            <div class="flex items-center space-x-4">
                <div id="notifications-badge" class="relative">
                    <button onclick="fetchNotifications()" class="text-grok-secondary hover:text-grok-accent"><i class="fas fa-bell"></i></button>
                    <span id="notif-count" class="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full px-1 min-w-[18px] hidden">{{ notifications_count or 0 }}</span>
                </div>
                <select id="sort-select" class="bg-transparent border border-grok-border rounded text-grok-text px-2 py-1">
                    <option value="latest" {% if sort == 'latest' %}selected{% endif %}>Latest</option>
                    <option value="most_views" {% if sort == 'most_views' %}selected{% endif %}>Most Views</option>
                    <option value="most_likes" {% if sort == 'most_likes' %}selected{% endif %}>Most Likes</option>
                </select>
            </div>
        </div>
    </div>
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 p-4 max-w-7xl mx-auto">
        <div class="lg:col-span-2" id="posts-container">
            {% include 'posts.html.j2' %}
            {% if not posts %}
                <div class="text-center py-8 text-grok-secondary">
                    <p>No posts yet. Create one above!</p>
                </div>
            {% endif %}
        </div>
        <div class="lg:col-span-1 space-y-4">
            <div class="card bg-grok-surface p-4 rounded-xl shadow-lg border border-grok-border">
                <h3 class="text-lg font-semibold text-grok-text mb-3">Your Profile</h3>
                <div class="flex items-center mb-3">
                    <div class="w-12 h-12 rounded-full bg-grok-accent text-grok-text flex items-center justify-center font-bold text-lg mr-3 shadow-md">
                        {{ user.handle[0] | upper if user and user.handle else 'U' }}
                    </div>
                    <div>
                        <p class="text-grok-text font-medium">{{ user.handle or session.email or 'User' }} (Grade {{ user.grade or 1 }})</p>
                        <p class="text-grok-secondary text-sm">Star Coins: {{ user.star_coins or 0 }}</p>
                        <p class="text-grok-secondary text-sm">Points: {{ user.points or 0 }}</p>
                    </div>
                </div>
                <a href="{{ url_for('profile') }}" class="text-grok-accent hover:underline text-sm">View Full Profile →</a>
            </div>
            {% include 'recent_test.html.j2' %}
            <div class="card bg-grok-surface p-4 rounded-xl shadow-lg border border-grok-border">
                <h3 class="text-lg font-semibold text-grok-text mb-3">Progress</h3>
                <p class="text-grok-text mb-1">Lessons Completed: {{ lessons_completed }}</p>
                <p class="text-grok-text mb-1">Games Played: {{ games_played }}</p>
                <p class="text-grok-text">Avg Test Score: {{ avg_score }}</p>
            </div>
            <div class="card bg-grok-surface p-4 rounded-xl shadow-lg border border-grok-border">
                <h3 class="text-lg font-semibold text-grok-text mb-3">Badges</h3>
                {% if badges %}
                    <div class="flex flex-wrap gap-2">
                        {% for badge in badges %}
                            <span class="bg-yellow-900/50 text-yellow-100 px-3 py-1 rounded-full text-sm font-medium shadow-sm">{{ badge.badge_name }} ({{ badge.awarded_date[:10] }})</span>
                        {% endfor %}
                    </div>
                {% else %}
                    <p class="text-grok-secondary text-sm">No badges yet. Keep going!</p>
                {% endif %}
            </div>
            <div class="card bg-grok-surface p-4 rounded-xl shadow-lg border border-grok-border">
                <h3 class="text-lg font-semibold text-grok-text mb-3">Recent Feedback</h3>
                {% if feedbacks %}
                    {% for feedback in feedbacks %}
                        <div class="mb-2 text-sm">
                            <p class="text-grok-text"><strong>Rating:</strong> {{ feedback.rating }}/5</p>
                            <p class="text-grok-secondary">{{ feedback.comments[:50] }}...</p>
                            <p class="text-xs text-grok-secondary">{{ feedback.submitted_date[:10] }}</p>
                        </div>
                    {% endfor %}
                {% else %}
                    <p class="text-grok-secondary text-sm">No feedback yet. <a href="{{ url_for('feedback') }}" class="text-grok-accent hover:underline">Share yours</a></p>
                {% endif %}
            </div>
            <div class="card bg-grok-surface p-4 rounded-xl shadow-lg border border-grok-border">
                <h3 class="text-lg font-semibold text-grok-text mb-3">Friends</h3>
                <p class="text-grok-text">{{ friend_count }} connected</p>
                <a href="#" class="text-grok-accent hover:underline text-sm">Find more →</a>
            </div>
            {% if feed_lessons %}
                <div class="card bg-grok-surface p-4 rounded-xl shadow-lg border border-grok-border">
                    <h3 class="text-lg font-semibold text-grok-text mb-3">Recommended Lessons</h3>
                    {% for lesson in feed_lessons %}
                        {% set dummy_post = {
                            'id': lesson.id,
                            'type': 'lesson',
                            'lesson': lesson,
                            'handle': 'Recommended',
                            'created_at': lesson.created_at or getattr(lesson, 'assigned_at', '') or '',
                            'subject': lesson.subject or 'General',
                            'grade': lesson.grade or (session.get('grade') if session else 1),
                            'completed': getattr(lesson, 'completed', false),
                            'is_new': false,
                            'liked_by_user': false,
                            'reposted_by_user': false,
                            'views': 0,
                            'likes': 0,
                            'reposts': 0
                        } %}
                        <div id="post-{{ dummy_post.id }}" class="mb-4">
                            {% set post = dummy_post %}
                            {% include 'lesson_card.html.j2' %}
                        </div>
                    {% endfor %}
                </div>
            {% endif %}
        </div>
    </div></div>

<!-- FAB for new posts -->
<div id="fab" class="fixed bottom-20 right-4 z-[60] transition-all duration-300 ease-in-out md:bottom-4 md:right-4">
    <button onclick="openPostModal()" class="bg-grok-accent text-grok-text rounded-full flex items-center justify-center hover:bg-grok-accent-hover transition shadow-lg w-12 h-12 md:w-auto md:px-4 md:h-10">
        <span class="block md:hidden text-xl">+</span>
        <span class="hidden md:block text-sm font-semibold">Create Post</span>
    </button>
</div>

{% include 'post_form.html.j2' %}<script>
function fetchNotifications() {
    fetch('/api/notifications_count')
        .then(r => r.json())
        .then(d => {
            const count = document.getElementById('notif-count');
            count.textContent = d.count;
            count.classList.toggle('hidden', d.count === 0);
        });
}
fetchNotifications();
function openPostModal() {
    document.getElementById('post-form').classList.remove('hidden');
    document.getElementById('post-form-backdrop').classList.remove('hidden');
    // Hide FAB when modal opens
    const fab = document.getElementById('fab');
    if (window.innerWidth < 768 && fab) {
        fab.style.opacity = '0';
        fab.style.visibility = 'hidden';
    }
}
// Auto-hide flash messages
document.addEventListener('DOMContentLoaded', function() {
    const flashMessages = document.querySelectorAll('[id^="flash-"]');
    flashMessages.forEach(function(msg, index) {
        const messageId = msg.getAttribute('data-message-id');
        const displayedKey = 'flash-displayed-' + messageId + '-' + index;
        if (localStorage.getItem(displayedKey)) {
            msg.style.display = 'none';
            return;
        }
        setTimeout(function() {
            msg.style.opacity = '0';
            msg.style.transition = 'opacity 0.5s ease-out';
            setTimeout(function() {
                msg.style.display = 'none';
                localStorage.setItem(displayedKey, 'true');
            }, 500);
        }, 5000);
    });
    // Ensure FAB shows initially on mobile
    const fab = document.getElementById('fab');
    if (window.innerWidth < 768 && fab) {
        fab.style.opacity = '1';
        fab.style.visibility = 'visible';
    }
    // Set initial lastScrollTop after a short delay to capture stable position
    setTimeout(() => {
        lastScrollTop = window.pageYOffset || document.documentElement.scrollTop;
    }, 100);
    // Show FAB when post modal closes (on cancel or after submit reload)
    const postForm = document.getElementById('post-form');
    function showFAB() {
        if (window.innerWidth < 768 && fab) {
            fab.style.opacity = '1';
            fab.style.visibility = 'visible';
            fab.style.transition = 'opacity 0.3s ease-in-out';
        }
    }
    if (postForm) {
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                    if (postForm.classList.contains('hidden')) {
                        showFAB();
                    }
                }
            });
        });
        observer.observe(postForm, { attributes: true });
    }
    // Sticky header and FAB scroll hide/show (defer bottom nav to base.html.j2 to avoid duplication)
    let lastScrollTop = 0;
    const header = document.getElementById('sticky-header');
    const fabEl = document.getElementById('fab');
    const isMobile = () => window.innerWidth < 768;
    const scrollThreshold = 10; // Minimum scroll change to trigger
    const topThreshold = 50; // Don't hide if near top
    window.addEventListener('scroll', function() {
        let st = window.pageYOffset || document.documentElement.scrollTop;
        const delta = st - lastScrollTop;
        const isScrollingDown = delta > scrollThreshold;
        const isScrollingUp = delta < -scrollThreshold;
        const nearTop = st < topThreshold;    // Header: always hide on down scroll
    if (isScrollingDown) {
        header.style.transform = 'translateY(-100%)';
    } else if (isScrollingUp) {
        header.style.transform = 'translateY(0)';
    }

    // FAB: hide on significant down scroll on mobile (unless near top), show on up
    if (isMobile() && fabEl) {
        if (isScrollingDown && !nearTop) {
            fabEl.style.opacity = '0';
            fabEl.style.visibility = 'hidden';
            fabEl.style.transition = 'opacity 0.3s ease-in-out, visibility 0.3s ease-in-out';
        } else if (isScrollingUp || nearTop) {
            fabEl.style.opacity = '1';
            fabEl.style.visibility = 'visible';
            fabEl.style.transition = 'opacity 0.3s ease-in-out';
        }
    }

    lastScrollTop = st <= 0 ? 0 : st;
});
// Handle sort selection with client-side sorting
const sortSelect = document.getElementById('sort-select');
const postsContainer = document.getElementById('posts-container');
function sortPosts(sortValue) {
    const posts = Array.from(postsContainer.querySelectorAll('[id^="post-"]'));
    posts.sort((a, b) => {
        try {
            if (sortValue === 'most_likes') {
                const likesA = parseInt(a.querySelector('.flex.flex-wrap.gap-2 span:nth-child(2)')?.textContent.match(/Likes: (\d+)/)?.[1] || 0);
                const likesB = parseInt(b.querySelector('.flex.flex-wrap.gap-2 span:nth-child(2)')?.textContent.match(/Likes: (\d+)/)?.[1] || 0);
                console.log(`Likes A: ${likesA} (post-${a.id}), Likes B: ${likesB} (post-${b.id})`);
                if (likesA !== likesB) return likesB - likesA; // Primary: Descending by likes
                // Secondary: Latest first if likes are tied
                const dateA = new Date(a.querySelector('.flex.items-center.mb-3 p.text-grok-secondary.text-xs')?.textContent || '1970-01-01');
                const dateB = new Date(b.querySelector('.flex.items-center.mb-3 p.text-grok-secondary.text-xs')?.textContent || '1970-01-01');
                console.log(`Date A: ${dateA} (post-${a.id}), Date B: ${dateB} (post-${b.id})`);
                return dateB - dateA;
            } else if (sortValue === 'most_views') {
                const viewsA = parseInt(a.querySelector('.flex.items-center.text-grok-secondary.text-xs')?.textContent.match(/(\d+) views/)?.[1] || 0);
                const viewsB = parseInt(b.querySelector('.flex.items-center.text-grok-secondary.text-xs')?.textContent.match(/(\d+) views/)?.[1] || 0);
                console.log(`Views A: ${viewsA} (post-${a.id}), Views B: ${viewsB} (post-${b.id})`);
                return viewsB - viewsA; // Descending by views
            } else {
                const dateA = new Date(a.querySelector('.flex.items-center.mb-3 p.text-grok-secondary.text-xs')?.textContent || '1970-01-01');
                const dateB = new Date(b.querySelector('.flex.items-center.mb-3 p.text-grok-secondary.text-xs')?.textContent || '1970-01-01');
                console.log(`Date A: ${dateA} (post-${a.id}), Date B: ${dateB} (post-${b.id})`);
                if (isNaN(dateA.getTime()) || isNaN(dateB.getTime())) {
                    console.error(`Invalid date for post-${a.id}: ${dateA}, post-${b.id}: ${dateB}`);
                    return 0; // Maintain order if dates are invalid
                }
                return dateB - dateA; // Descending by date (latest first)
            }
        } catch (e) {
            console.error('Sorting error:', e);
            return 0; // Maintain order if parsing fails
        }
    });
    postsContainer.innerHTML = ''; // Clear container
    posts.forEach(post => postsContainer.appendChild(post)); // Re-append sorted posts
}
sortSelect.addEventListener('change', function() {
    const sortValue = this.value;
    const currentUrl = new URL(window.location.href);
    currentUrl.searchParams.set('sort', sortValue);
    window.location.href = currentUrl.toString();
    sortPosts(sortValue); // Apply client-side sorting immediately
});
// Apply initial sorting based on URL parameter
const urlParams = new URLSearchParams(window.location.search);
const initialSort = urlParams.get('sort') || 'latest';
sortSelect.value = initialSort;
sortPosts(initialSort);});
</script>
{% endblock %}

