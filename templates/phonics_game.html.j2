{% extends 'base.html.j2' %}
{% block title %}Phonics Game - EduGrok{% endblock %}
{% block content %}
<div class="container mx-auto p-4 game-container">
  <h1 class="text-3xl font-bold mb-4 text-center">Mars Memory Match: Phonics Pirate Raid</h1>
  <div id="timer" class="text-2xl font-bold text-center mb-4 text-green-500">Time: 30s</div>
  <p class="text-center mb-4">Match the M-sound words before the space pirates steal them!</p>
  <div id="taunt" class="text-center mb-4 text-red-500 hidden"></div>
  <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
    {% for word in ['moon', 'mars', 'mug', 'mat', 'moon', 'mars', 'mug', 'mat'] %}
      <div class="card bg-gray-100 dark:bg-gray-800 p-4 rounded cursor-pointer game-input transform transition-transform duration-300" data-word="{{ word }}" onclick="flipCard(this)">
        <span class="front text-center text-xl">{{ word }}</span>
        <span class="back hidden text-center text-xl">?</span>
      </div>
    {% endfor %}
  </div>
</div>
<script>
const taunts = [
  "Argh, ye missed me treasure!",
  "Shiver me timbers, try again!",
  "Ye'll never catch me words!"
];
let flippedCards = [];
let matchedPairs = 0;
let timeLeft = 30;
let timerId = null;
const timerDisplay = document.getElementById('timer');
const tauntDisplay = document.getElementById('taunt');

function startTimer() {
  timerId = setInterval(() => {
    timeLeft--;
    timerDisplay.textContent = `Time: ${timeLeft}s`;
    timerDisplay.className = `text-2xl font-bold text-center mb-4 ${timeLeft <= 10 ? 'text-red-500' : 'text-green-500'}`;
    if (timeLeft <= 0) {
      clearInterval(timerId);
      alert("Time's up! The pirates stole your words!");
      document.querySelectorAll('.game-input').forEach(input => input.classList.add('cursor-not-allowed'));
      document.querySelectorAll('.card').forEach(card => card.onclick = null);
    }
  }, 1000);
}

function flipCard(card) {
  if (timeLeft <= 0 || flippedCards.length >= 2 || card.classList.contains('matched')) return;
  card.classList.add('rotate-y-180');
  card.querySelector('.front').classList.add('hidden');
  card.querySelector('.back').classList.remove('hidden');
  flippedCards.push(card);
  if (flippedCards.length === 2) {
    const [card1, card2] = flippedCards;
    if (card1.dataset.word === card2.dataset.word) {
      card1.classList.add('matched', 'bg-green-200', 'dark:bg-green-700');
      card2.classList.add('matched', 'bg-green-200', 'dark:bg-green-700');
      matchedPairs++;
      if (matchedPairs === 4) {
        completeGame();
      }
    } else {
      tauntDisplay.textContent = taunts[Math.floor(Math.random() * taunts.length)];
      tauntDisplay.classList.remove('hidden');
      setTimeout(() => {
        card1.classList.remove('rotate-y-180');
        card2.classList.remove('rotate-y-180');
        card1.querySelector('.front').classList.remove('hidden');
        card1.querySelector('.back').classList.add('hidden');
        card2.querySelector('.front').classList.remove('hidden');
        card2.querySelector('.back').classList.add('hidden');
        tauntDisplay.classList.add('hidden');
      }, 1000);
    }
    flippedCards = [];
  }
}

function completeGame() {
  if (timeLeft > 0) {
    clearInterval(timerId);
    fetch('/update_coins', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ coins: 5 })
    }).then(response => response.json()).then(data => {
      if (data.success) {
        alert('You beat the pirates! +5 Star Coins');
        window.location.href = '/profile';
      } else {
        alert('Failed to award coins: ' + (data.error || 'Unknown error'));
      }
    }).catch(error => {
      alert('Error completing game');
      console.error(error);
    });
  }
}

document.addEventListener('DOMContentLoaded', () => {
  startTimer();
  const cards = document.querySelectorAll('.card');
  const shuffled = [...cards].sort(() => Math.random() - 0.5);
  const container = document.querySelector('.grid');
  container.innerHTML = '';
  shuffled.forEach(card => container.appendChild(card));
});
</script>
<style>
.card { transition: transform 0.3s; }
.card.matched { pointer-events: none; }
.rotate-y-180 { transform: rotateY(180deg); }
</style>
{% endblock %}