{% extends "base.html.j2" %}
{% block content %}
<div class="container mx-auto px-4 py-8 max-w-4xl">
  <h1 class="text-3xl font-bold text-center mb-6 {{ theme.text_color | default('text-gray-800') }}">Phonics Memory Match: M Sounds</h1>
  <p class="text-lg text-center mb-8 {{ theme.text_color | default('text-gray-600') }}">Match the M-sound words to earn Star Coins!</p>
  <div id="game-board" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4" role="grid" aria-label="Memory match game board">
    <!-- Cards rendered by JS -->
  </div>
  <div id="game-status" class="text-center mt-6 text-lg font-semibold {{ theme.text_color | default('text-gray-800') }}" role="status" aria-live="polite"></div>
  <div class="flex justify-center mt-6">
    <button id="reset-game" class="bg-{{ theme.button_bg | default('blue-500') }} text-white px-6 py-3 rounded-lg shadow-md hover:bg-{{ theme.button_hover | default('blue-600') }} transition duration-200" aria-label="Reset game">Play Again</button>
  </div>
</div>

<script>
  const wordPairs = [
    { word: 'moon', id: 1 }, { word: 'moon', id: 1 },
    { word: 'mug', id: 2 }, { word: 'mug', id: 2 },
    { word: 'mouse', id: 3 }, { word: 'mouse', id: 3 },
    { word: 'milk', id: 4 }, { word: 'milk', id: 4 },
    { word: 'map', id: 5 }, { word: 'map', id: 5 }
  ];

  function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }

  let flippedCards = [];
  let matchedPairs = 0;
  const totalPairs = wordPairs.length / 2;

  function initGame() {
    const gameBoard = document.getElementById('game-board');
    gameBoard.innerHTML = '';
    flippedCards = [];
    matchedPairs = 0;
    document.getElementById('game-status').textContent = 'Find the matching M-sound words!';
    
    const shuffledCards = shuffle([...wordPairs]);
    shuffledCards.forEach((card, index) => {
      const cardElement = document.createElement('div');
      cardElement.className = 'card bg-{{ theme.card_bg | default('gray-200') }} p-4 rounded-lg shadow-md cursor-pointer text-center h-24 flex items-center justify-center';
      cardElement.dataset.id = card.id;
      cardElement.dataset.word = card.word;
      cardElement.setAttribute('role', 'button');
      cardElement.setAttribute('aria-label', `Card ${index + 1}, face down`);
      cardElement.setAttribute('tabindex', '0');
      cardElement.innerHTML = '<span class="card-face hidden text-xl font-semibold">{{ theme.card_back | default('?') }}</span>';
      cardElement.addEventListener('click', () => flipCard(cardElement));
      cardElement.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') flipCard(cardElement);
      });
      gameBoard.appendChild(cardElement);
    });
  }

  function flipCard(cardElement) {
    if (flippedCards.length < 2 && !flippedCards.includes(cardElement) && !cardElement.classList.contains('matched')) {
      cardElement.classList.add('flipped', '{{ theme.card_flipped_bg | default('bg-green-500') }}', 'text-white');
      cardElement.querySelector('.card-face').classList.remove('hidden');
      cardElement.querySelector('.card-face').textContent = cardElement.dataset.word;
      cardElement.setAttribute('aria-label', `Card showing ${cardElement.dataset.word}`);
      flippedCards.push(cardElement);

      if (flippedCards.length === 2) {
        checkMatch();
      }
    }
  }

  function checkMatch() {
    const [card1, card2] = flippedCards;
    if (card1.dataset.id === card2.dataset.id) {
      card1.classList.add('matched', '{{ theme.card_matched_bg | default('bg-green-600') }}');
      card2.classList.add('matched', '{{ theme.card_matched_bg | default('bg-green-600') }}');
      card1.setAttribute('aria-label', `Matched card: ${card1.dataset.word}`);
      card2.setAttribute('aria-label', `Matched card: ${card2.dataset.word}`);
      matchedPairs++;
      document.getElementById('game-status').textContent = `Match found! ${matchedPairs}/${totalPairs} pairs matched.`;
      flippedCards = [];

      if (matchedPairs === totalPairs) {
        document.getElementById('game-status').textContent = 'You won! All pairs matched!';
        fetch('/update_coins', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ coins: 10 })
        }).then(response => response.json()).then(data => {
          if (data.success) {
            document.getElementById('game-status').textContent += ` Earned 10 Star Coins!`;
          }
        });
      }
    } else {
      document.getElementById('game-status').textContent = 'No match, try again!';
      setTimeout(() => {
        flippedCards.forEach(card => {
          card.classList.remove('flipped', '{{ theme.card_flipped_bg | default('bg-green-500') }}', 'text-white');
          card.querySelector('.card-face').classList.add('hidden');
          card.setAttribute('aria-label', `Card face down`);
        });
        flippedCards = [];
        document.getElementById('game-status').textContent = 'Find the matching M-sound words!';
      }, 1000);
    }
  }

  document.getElementById('reset-game').addEventListener('click', initGame);
  initGame();
</script>
{% endblock %}