<!-- Filename: lesson_card.html.j2 -->
<!-- Fixes: Simplified trace success message to "Drawing saved ✓" as requested. Added console.log for debugging submitActivity (logs entry, data.success, is_correct, and replacement attempt). Ensured canvas.toDataURL captures drawing before closeTracePopup. Retained image display below message. If not working, check browser console for logs/errors (e.g., fetch failure, selector miss). Added try-catch around replacement for robustness. -->
<div class="card bg-grok-surface border-2 border-blue-400 p-5 rounded-xl shadow-lg max-w-lg mx-auto mb-6 {% if post.is_new %}pulse-border bg-blue-50/20{% endif %}" id="lesson-{{ post.lesson.id | default(post.id) }}" {% if post.completed %}data-completed="true"{% endif %}>
    <div class="flex items-center mb-3">
        <div class="mr-3">
            {% if post.profile_picture %}
                <img src="{{ post.profile_picture }}" alt="Profile Picture" class="w-10 h-10 rounded-full object-cover shadow-sm">
            {% else %}
                <div class="w-10 h-10 rounded-full bg-blue-500 text-white flex items-center justify-center font-bold text-sm shadow-sm">
                    {{ post.lesson.subject[0] | upper if post.lesson.subject else 'L' }}
                </div>
            {% endif %}
        </div>
        <div class="flex-1">
            <p class="text-grok-text font-semibold">{{ post.lesson.title | default('Untitled Lesson') }} ({{ post.handle | default('User') }})</p>
            <p class="text-grok-secondary text-sm">{{ post.created_at | default('Now') }} • {{ post.lesson.subject | default('General') | capitalize }}</p>
        </div>
    </div>
    <p class="text-grok-text mb-4 prose prose-sm max-w-none">{{ post.lesson.description | default('Dive into this interactive lesson!') | safe }}</p>
    <div class="space-y-4 mb-4">
        {% if post.lesson.trace_word %}
            <div class="text-center" id="draw-container-{{ post.lesson.id | default(post.id) }}">
                <button id="draw-btn-{{ post.lesson.id | default(post.id) }}" onclick="window.toggleTracePopup({{ post.lesson.id | default(post.id) }})" class="bg-blue-500 text-white px-6 py-3 rounded-lg font-semibold shadow-md">Draw</button>
            </div>
            <!-- Trace Popup (initially in card, JS moves to body) -->
            <div id="trace-popup-{{ post.lesson.id | default(post.id) }}" class="fixed inset-0 z-50 popup-closed pointer-events-none bg-black bg-opacity-50" style="display: none;">
                <div class="absolute inset-0 flex items-center justify-center p-4">
                    <div class="bg-grok-surface rounded-xl shadow-2xl border border-grok-border w-[450px] max-w-full max-h-[60vh] overflow-y-auto opacity-0 scale-95">
                        <div class="p-6 border-b border-grok-border flex justify-between items-center">
                            <h3 class="text-xl font-bold text-grok-text">Trace Activity</h3>
                            <button onclick="window.closeTracePopup({{ post.lesson.id | default(post.id) }})" class="text-grok-text text-2xl">&times;</button>
                        </div>
                        <div class="p-6">
                            {% include 'trace_activity.html.j2' %}
                        </div>
                    </div>
                </div>
            </div>
        {% endif %}
        {% if post.lesson.spell_word %}
            {% include 'spell_activity.html.j2' %}
        {% endif %}
        {% if post.lesson.mc_question %}
            {% include 'mc_activity.html.j2' %}
        {% endif %}
        {% if post.lesson.sentence_question %}
            {% include 'sentence_activity.html.j2' %}
        {% endif %}
        {% if post.lesson.math_question %}
            {% include 'math_activity.html.j2' %}
        {% endif %}
        {% if post.lesson.sound %}
            {% include 'sound_activity.html.j2' %}
        {% endif %}
    </div>
    <div class="flex justify-between text-grok-secondary mb-4 text-xs">
        <span> {{ post.views or 0 }} views</span>
        <span> {{ post.likes or 0 }} likes</span>
        <span> {{ (comments[post.id] | length) if post.id in comments else 0 }} notes</span>
    </div>
    <div class="flex justify-between border-t border-blue-300 pt-3 text-sm">
        <button onclick="window.likePost({{ post.id }})" class="text-grok-text flex items-center {% if post.liked_by_user %}text-blue-500{% endif %}">
            <i class="fas fa-heart mr-1"></i>{{ 'Unlike' if post.liked_by_user else 'Like' }}
        </button>
        <button onclick="window.toggleComments({{ post.id }})" class="text-grok-text flex items-center">
            <i class="fas fa-comment mr-1"></i>Notes
        </button>
        <button class="text-grok-text flex items-center opacity-50 cursor-not-allowed" disabled>
            <i class="fas fa-share mr-1"></i>Share
        </button>
    </div>
    <div id="comment-form-{{ post.id }}" style="display: none;" class="mt-3">
        <form method="POST" action="/comment/{{ post.id }}">
            <textarea name="content" placeholder="Add a note..." class="w-full p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 bg-white text-gray-900" required rows="2"></textarea>
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-md mt-2">Post Note</button>
        </form>
    </div>
    {% if post.id in comments %}
        <div class="mt-4">
            <h4 class="text-sm font-semibold text-grok-text mb-2">Notes:</h4>
            {% for comment in (comments[post.id] | sort(attribute='created_at'))[:3] %}
                <div class="border-l-2 border-blue-400 pl-4 mb-2 text-sm">
                    <strong class="text-grok-text">{{ comment.handle | default('Anon') }}</strong> - <small class="text-grok-secondary">{{ comment.created_at }}</small>
                    <p>{{ comment.content | safe }}</p>
                </div>
            {% endfor %}
            {% if (comments[post.id] | length) > 3 %}
                <div id="hidden-comments-{{ post.id }}" style="display: none;">
                    {% for comment in comments[post.id] | slice(3) %}
                        <div class="border-l-2 border-blue-400 pl-4 mb-2 text-sm">
                            <strong class="text-grok-text">{{ comment.handle | default('Anon') }}</strong> - <small class="text-grok-secondary">{{ comment.created_at }}</small>
                            <p>{{ comment.content | safe }}</p>
                        </div>
                    {% endfor %}
                </div>
                <button id="toggle-btn-{{ post.id }}" onclick="window.toggleCommentsExtra({{ post.id }})" class="text-blue-500 underline text-sm">Show more ({{ (comments[post.id] | length) - 3 }} more)</button>
            {% endif %}
        </div>
    {% endif %}
</div>

<script>
if (!window.activityOrder) {
  window.activityOrder = ['trace', 'spell', 'mc', 'sentence', 'math', 'sound'];
}

if (!window.activityState) window.activityState = {};

if (!window.initAllActivities) {
  window.initAllActivities = function() {
    document.querySelectorAll('.card[id^="lesson-"]').forEach(card => {
      const lessonId = card.id.split('-')[1];
      window.activityState[lessonId] = window.activityState[lessonId] || { tries: {} };
      const isCompleted = card.dataset.completed === 'true';
      const sections = Array.from(card.querySelectorAll('.activity-section')).filter(s => window.activityOrder.includes(s.dataset.type));
      console.log(`Enabling ${sections.length} activities in lesson ${lessonId}`);
      sections.forEach(section => {
        const type = section.dataset.type;
        window.activityState[lessonId].tries[type] = window.activityState[lessonId].tries[type] || 3;
        if (isCompleted || window.activityState[lessonId].tries[type] === 0) {
          section.classList.add('opacity-50', 'pointer-events-none');
        } else {
          section.classList.remove('disabled-activity', 'opacity-50');
          section.style.opacity = '1';
          section.style.pointerEvents = 'auto';
          section.querySelectorAll('input, button, canvas, select').forEach(el => {
            el.disabled = false;
            el.style.opacity = '1';
            el.classList.remove('opacity-50', 'cursor-not-allowed');
          });
        }
        if (type === 'trace' && !isCompleted) window.initCanvas(lessonId);
      });
      if (card.querySelector('canvas[id^="trace-canvas-"]') && !isCompleted) window.initCanvas(lessonId);
    });
  }
}

let popupElements = {}; // Track moved elements

// Define global overlayClick function
window.overlayClick = function(e, lessonId) {
  const popup = document.getElementById(`trace-popup-${lessonId}`);
  if (e.target === popup) {
    window.closeTracePopup(lessonId);
  }
};

if (!window.toggleTracePopup) {
  window.toggleTracePopup = function(lessonId) {
    const popupId = `trace-popup-${lessonId}`;
    let popup = document.getElementById(popupId);
    if (!popup) return;
    
    if (popup.parentNode !== document.body) {
      // Move to body on first open to escape card clipping
      document.body.appendChild(popup);
      popupElements[lessonId] = popup;
    }
    
    const modal = popup.querySelector('.bg-grok-surface');
    if (popup.classList.contains('popup-closed')) {
      // Open instantly
      document.body.style.overflow = 'hidden';
      document.body.style.position = 'fixed'; // Prevent background scroll
      popup.style.display = 'block';
      popup.classList.remove('popup-closed');
      popup.style.pointerEvents = 'auto';
      modal.style.opacity = '1';
      modal.style.transform = 'scale(1)';
      // Add overlay click handler using global function
      popup.addEventListener('click', (e) => window.overlayClick(e, lessonId));
      popup._overlayClick = (e) => window.overlayClick(e, lessonId); // Store for removal
      // Immediate init
      window.initCanvas(lessonId);
    } else {
      window.closeTracePopup(lessonId);
    }
  }
}

if (!window.closeTracePopup) {
  window.closeTracePopup = function(lessonId) {
    const popupId = `trace-popup-${lessonId}`;
    const popup = document.getElementById(popupId);
    if (!popup) return;
    
    const modal = popup.querySelector('.bg-grok-surface');
    modal.style.opacity = '0';
    modal.style.transform = 'scale(0.95)';
    popup.classList.add('popup-closed');
    popup.style.pointerEvents = 'none';
    popup.style.display = 'none'; // Fully hide to prevent scroll/layout issues
    document.body.style.overflow = '';
    document.body.style.position = ''; // Reset body styles
    // Remove overlay handler
    if (popup._overlayClick) {
      popup.removeEventListener('click', popup._overlayClick);
      delete popup._overlayClick;
    }
  }
}

// Consolidated trace functions (ensures popup buttons work)
if (!window.traceCanvases) window.traceCanvases = {};
if (!window.initCanvas) {
  window.initCanvas = function(lessonId) {
    const canvas = document.getElementById(`trace-canvas-${lessonId}`);
    if (!canvas || window.traceCanvases[lessonId]) return;
    window.traceCanvases[lessonId] = true;
    const ctx = canvas.getContext('2d');
    let drawing = false;
    let drawingEnabled = false;
    let currentLineWidth = 3;
    let currentColor = '#000000';

    // Draw faint guide text
    function drawGuideText() {
      const traceWord = canvas.dataset.traceWord;
      ctx.save();
      ctx.globalAlpha = 0.3;
      ctx.font = 'bold 24px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText(traceWord, canvas.width / 2, canvas.height / 2);
      ctx.restore();
    }

    window.toggleDrawing = function(id) {
      if (id !== lessonId) return;
      drawingEnabled = !drawingEnabled;
      const toggleBtn = document.getElementById(`draw-toggle-${id}`);
      if (toggleBtn) {
        toggleBtn.textContent = drawingEnabled ? 'Stop Drawing' : 'Start Drawing';
        toggleBtn.className = drawingEnabled ? 'bg-green-500 text-white px-4 py-2 rounded-md' : 'bg-blue-500 text-white px-4 py-2 rounded-md';
      }
      if (!drawingEnabled) drawing = false;
    };

    window.updateLineWidth = function(id, width) {
      if (id !== lessonId) return;
      currentLineWidth = parseInt(width);
      ctx.lineWidth = currentLineWidth;
    };

    window.updateColor = function(id, color) {
      if (id !== lessonId) return;
      currentColor = color;
      ctx.strokeStyle = currentColor;
    };

    window.clearCanvas = function(canvasId) {
      if (canvasId !== `trace-canvas-${lessonId}`) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawGuideText();
    };

    window.drawShape = function(id, shape) {
      if (id !== lessonId) return;
      const colorInput = document.getElementById(`color-${id}`);
      const widthSelect = document.getElementById(`width-${id}`);
      const shapeColor = colorInput ? colorInput.value : currentColor;
      const shapeWidth = widthSelect ? parseInt(widthSelect.value) : currentLineWidth;
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      const radius = 30;
      ctx.beginPath();
      if (shape === 'circle') {
        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
      } else if (shape === 'square') {
        const side = 60;
        const offset = side / 2;
        ctx.rect(centerX - offset, centerY - offset, side, side);
      }
      ctx.strokeStyle = shapeColor;
      ctx.lineWidth = shapeWidth;
      ctx.lineCap = 'round';
      ctx.lineJoin = 'round';
      ctx.stroke();
    };

    function getCoordinates(e) {
      const rect = canvas.getBoundingClientRect();
      const style = window.getComputedStyle(canvas);
      const borderLeft = parseFloat(style.borderLeftWidth) || 0;
      const borderTop = parseFloat(style.borderTopWidth) || 0;
      const clientX = e.clientX || (e.touches && e.touches[0].clientX) || 0;
      const clientY = e.clientY || (e.touches && e.touches[0].clientY) || 0;
      return {
        x: clientX - (rect.left + borderLeft),
        y: clientY - (rect.top + borderTop)
      };
    }

    function startDrawing(e) {
      e.stopPropagation();
      if (!drawingEnabled) return;
      drawing = true;
      const { x, y } = getCoordinates(e);
      ctx.beginPath();
      ctx.moveTo(x, y);
      if (e.type === 'touchstart') e.preventDefault();
    }

    function draw(e) {
      e.stopPropagation();
      if (!drawing || !drawingEnabled) return;
      const { x, y } = getCoordinates(e);
      ctx.lineTo(x, y);
      ctx.lineCap = 'round';
      ctx.lineJoin = 'round';
      ctx.strokeStyle = currentColor;
      ctx.lineWidth = currentLineWidth;
      ctx.stroke();
      if (e.type === 'touchmove') e.preventDefault();
    }

    function endDrawing(e) {
      e.stopPropagation();
      drawing = false;
      if (e.type === 'touchend') e.preventDefault();
    }

    // Event listeners
    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseup', endDrawing);
    canvas.addEventListener('mouseout', endDrawing);

    canvas.addEventListener('touchstart', startDrawing, { passive: false });
    canvas.addEventListener('touchmove', draw, { passive: false });
    canvas.addEventListener('touchend', endDrawing, { passive: false });
    canvas.addEventListener('touchcancel', endDrawing, { passive: false });

    // Initial guide draw
    drawGuideText();
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';
    ctx.lineWidth = currentLineWidth;
    ctx.strokeStyle = currentColor;
  }
}

// Global functions for other activities (e.g., submitActivity for check buttons)
if (!window.submitActivity) {
  window.submitActivity = async function(event, lessonId, activityType) {
    event.preventDefault();
    console.log(`submitActivity called for lesson ${lessonId}, type ${activityType}`); // Debug log
    if (window.activityState[lessonId].tries[activityType] === 0) return;
    const formData = new FormData();
    formData.append('lesson_id', lessonId);
    formData.append('activity_type', activityType);
    let responseValue;
    if (activityType === 'trace') {
      const canvas = document.getElementById(`trace-canvas-${lessonId}`);
      responseValue = canvas ? canvas.dataset.traceWord : '';
    } else if (activityType === 'sound') {
      responseValue = document.getElementById(`sound-${lessonId}`).value;
    } else if (activityType === 'spell') {
      responseValue = document.getElementById(`spell-${lessonId}`).value;
    } else if (activityType === 'mc') {
      responseValue = document.getElementById(`mc-hidden-${lessonId}`).value;
    } else if (activityType === 'sentence') {
      responseValue = document.getElementById(`sentence-hidden-${lessonId}`).value;
    } else if (activityType === 'math') {
      responseValue = document.getElementById(`math-${lessonId}`).value;
    }
    if (!responseValue) {
      alert('Please enter your response');
      return;
    }
    formData.append('response', responseValue);
    try {
      const res = await fetch('/check_lesson', {
        method: 'POST',
        body: formData
      });
      const data = await res.json();
      console.log('Fetch response:', data); // Debug log: check success, is_correct
      if (data.success) {
        // Force trace to always be correct without comparison
        if (activityType === 'trace') {
          data.is_correct = true;
        }
        const section = document.querySelector(`#lesson-${lessonId} [data-type="${activityType}"]`);
        if (data.is_correct) {
          let successMsg = '';
          if (activityType === 'trace') {
            const traceWord = document.getElementById(`trace-canvas-${lessonId}`)?.dataset.traceWord || '';
            const canvas = document.getElementById(`trace-canvas-${lessonId}`);
            const canvasImg = canvas ? canvas.toDataURL('image/png') : '';
            // Replace card's draw container with success and image
            const drawContainer = document.getElementById(`draw-container-${lessonId}`);
            console.log('Attempting replacement on container:', drawContainer); // Debug log
            if (drawContainer) {
              try {
                drawContainer.innerHTML = `
                  <p class="text-green-700 font-semibold mb-2">Drawing saved ✓</p>
                  ${canvasImg ? `<img src="${canvasImg}" alt="Your drawing" class="mx-auto mt-2 rounded shadow-md max-w-full h-32 object-contain">` : ''}
                `;
                console.log('Replacement successful'); // Debug log
              } catch (err) {
                console.error('Replacement error:', err); // Debug log
              }
            } else {
              console.error('Draw container not found'); // Debug log
            }
            // No need to update section since popup will close
            window.closeTracePopup(lessonId); // Close after capture
          } else {
            const typeTitle = activityType.charAt(0).toUpperCase() + activityType.slice(1);
            successMsg = `<h4 class="text-green-700 font-medium">${typeTitle} (Correct!)</h4>`;
            if (section) section.innerHTML = successMsg;
          }
        } else {
          window.activityState[lessonId].tries[activityType]--;
          const tries = window.activityState[lessonId].tries[activityType];
          const feedbackDiv = document.createElement('div');
          const typeTitle = activityType.charAt(0).toUpperCase() + activityType.slice(1);
          feedbackDiv.innerHTML = `<p class="text-red-700 mt-2">Wrong! Tries left: ${tries}. Correct: ${data.correct_answer}. <button onclick="window.resetActivity(${lessonId}, '${activityType}')" class="bg-red-500 text-white px-2 py-1 rounded">Retry</button></p>`;
          if (section) section.appendChild(feedbackDiv);
          if (tries === 0) {
            if (section) section.classList.add('opacity-50', 'pointer-events-none');
          }
        }
        if (data.lesson_complete) {
          // Update DB via complete_lesson API
          fetch(`/complete_lesson/${lessonId}`)
            .then(r => r.ok ? console.log('Lesson marked complete') : console.error('Complete failed'))
            .catch(e => console.error('Complete error:', e));
          const card = document.getElementById(`lesson-${lessonId}`);
          if (card) {
            card.classList.add('lesson-completed');
            card.querySelectorAll('.activity-section').forEach(s => {
              s.classList.add('opacity-50', 'pointer-events-none');
            });
            card.innerHTML += '<p class="text-green-700 font-bold mt-4">Lesson Completed!</p>';
          }
        }
      } else {
        console.error('API error:', data.error); // Debug log
      }
    } catch (e) {
      console.error('Submission failed:', e); // Debug log
    }
  };
}

// Add resetActivity to clear input on retry
window.resetActivity = function(lessonId, activityType) {
  const section = document.querySelector(`#lesson-${lessonId} [data-type="${activityType}"]`);
  const input = section.querySelector('input, textarea');
  if (input) input.value = '';
  const feedback = section.querySelector('.text-red-700');
  if (feedback) feedback.remove();
  if (activityType === 'trace') window.clearCanvas(`trace-canvas-${lessonId}`);
  if (activityType === 'mc' || activityType === 'sentence') {
    section.querySelectorAll('.mc-btn').forEach(b => b.classList.remove('selected'));
    section.querySelector(`#${activityType}-hidden-${lessonId}`).value = '';
  }
};

// Add for MC selection if not present
if (!window.selectMcOption) {
  window.selectMcOption = function(lessonId, btn, value, type) {
    const hidden = document.getElementById(`${type}-hidden-${lessonId}`);
    hidden.value = value;
    btn.parentNode.querySelectorAll('.mc-btn').forEach(b => b.classList.remove('selected'));
    btn.classList.add('selected');
  };
}

// ... (rest of JS functions: playAudio, speakQuestion, likePost, toggleComments, toggleCommentsExtra - assume defined elsewhere or add as needed)

document.addEventListener('DOMContentLoaded', window.initAllActivities);
</script>

<style>
.pulse-border { 
    position: relative; 
    border: 2px solid transparent; 
    border-radius: 0.75rem;
    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7);
    animation: pulse 4s linear infinite;
}
@keyframes pulse { 
    0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7); } 
    70% { box-shadow: 0 0 0 10px rgba(59, 130, 246, 0); } 
    100% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0); } 
}

.popup-closed {
  opacity: 0;
}

@media (max-width: 640px) {
  canvas[id^="trace-canvas-"] {
    width: 100% !important;
    height: 150px !important;
  }
  
  /* Mobile full-screen */
  [id^="trace-popup-"] .bg-grok-surface {
    width: 100vw !important;
    height: 100vh !important;
    max-width: none !important;
    max-height: none !important;
    border-radius: 0 !important;
    margin: 0 !important;
  }
}

.mc-btn.selected {
  background-color: #3b82f6 !important;
  color: white !important;
  border-color: #3b82f6 !important;
}

.lesson-completed .activity-section {
  opacity: 0.5;
  pointer-events: none;
}
</style>

