<!-- Filename: lesson_card.html.j2 -->
{# Updated: Refactored to modular structure. Removed inline activity HTML; replaced with conditional {% include %} for each activity type. Retained overall card layout, header, description, stats, actions, and comments. Moved activity-specific JS to sub-templates where possible, but kept shared global functions (e.g., submitActivity, speakQuestion) here. Adjusted classes and IDs for consistency. Preserved pulse-border, completion styling. #}
{# Fix: Disabled sequencing logic to enable all activities/controls by default—no more grayed-out buttons. Added force-cleanup in init. #}
{# Enhancement: For trace activity, replaced direct include with "Draw" button that toggles responsive popup (full-width mobile, 70% desktop) containing trace_activity.html.j2. Added JS for popup toggle/close. Removed any bg-blue-50 references; relies on sub-template minimal styling for consistency across activities. #}
{# Fix: Ensured trace popup centers on viewport (screen) by removing outer padding, adding body overflow hidden on open/close to prevent scroll interference. #}
{# Fix: Addressed confinement/flicker—use JS to append popup to body on open (escapes card div clipping); switch to absolute+transform centering (no flex reflow on mouse move); opacity toggle instead of display:hidden for smooth no-flicker reveal; stopPropagation on canvas to prevent close on draw/click; overlay click-to-close. Mobile: full vw/vh override. #}

<div class="card bg-grok-surface border-2 border-blue-400 p-5 rounded-xl shadow-lg hover:-translate-y-1 hover:shadow-xl transition-all duration-200 max-w-lg mx-auto mb-6 {% if post.is_new %}pulse-border bg-blue-50/20{% endif %}" id="lesson-{{ post.lesson.id | default(post.id) }}">
    <div class="flex items-center mb-3">
        <div class="w-10 h-10 rounded-full bg-blue-500 text-white flex items-center justify-center mr-3 font-bold text-sm shadow-sm">
            {{ post.lesson.subject[0] | upper if post.lesson.subject else 'L' }}
        </div>
        <div class="flex-1">
            <p class="text-grok-text font-semibold">{{ post.lesson.title | default('Untitled Lesson') }} ({{ post.handle | default('User') }})</p>
            <p class="text-grok-secondary text-sm">{{ post.created_at | default('Now') }} • {{ post.lesson.subject | default('General') | capitalize }}</p>
        </div>
    </div>
    <p class="text-grok-text mb-4 prose prose-sm max-w-none">{{ post.lesson.description | default('Dive into this interactive lesson!') | safe }}</p>
    <div class="space-y-4 mb-4">
        {% if post.lesson.trace_word %}
            <div class="text-center">
                <button onclick="window.toggleTracePopup({{ post.lesson.id | default(post.id) }})" class="bg-blue-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-600 transition shadow-md">Draw</button>
            </div>
            <!-- Trace Popup (initially in card, JS moves to body) -->
            <div id="trace-popup-{{ post.lesson.id | default(post.id) }}" class="fixed inset-0 z-50 popup-closed pointer-events-none bg-black bg-opacity-50 transition-opacity duration-300 ease-in-out" style="backdrop-filter: blur(4px);">
                <div class="absolute inset-0 flex items-center justify-center p-4">
                    <div class="bg-grok-surface rounded-xl shadow-2xl border border-grok-border w-full max-w-4xl max-h-[90vh] overflow-y-auto transition-all duration-300 ease-out opacity-0 scale-95">
                        <div class="p-6 border-b border-grok-border flex justify-between items-center">
                            <h3 class="text-xl font-bold text-grok-text">Trace Activity</h3>
                            <button onclick="window.closeTracePopup({{ post.lesson.id | default(post.id) }})" class="text-grok-text hover:text-grok-accent text-2xl">&times;</button>
                        </div>
                        <div class="p-6">
                            {% include 'trace_activity.html.j2' %}
                        </div>
                    </div>
                </div>
            </div>
        {% endif %}
        {% if post.lesson.spell_word %}
            {% include 'spell_activity.html.j2' %}
        {% endif %}
        {% if post.lesson.mc_question %}
            {% include 'mc_activity.html.j2' %}
        {% endif %}
        {% if post.lesson.sentence_question %}
            {% include 'sentence_activity.html.j2' %}
        {% endif %}
        {% if post.lesson.math_question %}
            {% include 'math_activity.html.j2' %}
        {% endif %}
        {% if post.lesson.sound %}
            {% include 'sound_activity.html.j2' %}
        {% endif %}
    </div>
    <div class="flex justify-between text-grok-secondary mb-4 text-xs">
        <span> {{ post.views or 0 }} views</span>
        <span> {{ post.likes or 0 }} likes</span>
        <span> {{ (comments[post.id] | length) if post.id in comments else 0 }} notes</span>
    </div>
    <div class="flex justify-between border-t border-blue-300 pt-3 text-sm">
        <button onclick="window.likePost({{ post.id }})" class="text-grok-text hover:text-blue-500 flex items-center {% if post.liked_by_user %}text-blue-500{% endif %}">
            <i class="fas fa-heart mr-1"></i>{{ 'Unlike' if post.liked_by_user else 'Like' }}
        </button>
        <button onclick="window.toggleComments({{ post.id }})" class="text-grok-text hover:text-blue-500 flex items-center">
            <i class="fas fa-comment mr-1"></i>Notes
        </button>
        <button class="text-grok-text flex items-center opacity-50 cursor-not-allowed" disabled>
            <i class="fas fa-share mr-1"></i>Share
        </button>
    </div>
    <div id="comment-form-{{ post.id }}" style="display: none;" class="mt-3">
        <form method="POST" action="/comment/{{ post.id }}">
            <textarea name="content" placeholder="Add a note..." class="w-full p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 bg-white text-gray-900" required rows="2"></textarea>
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 mt-2">Post Note</button>
        </form>
    </div>
    {% if post.id in comments %}
        <div class="mt-4">
            <h4 class="text-sm font-semibold text-grok-text mb-2">Notes:</h4>
            {% for comment in (comments[post.id] | sort(attribute='created_at'))[:3] %}
                <div class="border-l-2 border-blue-400 pl-4 mb-2 text-sm">
                    <strong class="text-grok-text">{{ comment.handle | default('Anon') }}</strong> - <small class="text-grok-secondary">{{ comment.created_at }}</small>
                    <p>{{ comment.content | safe }}</p>
                </div>
            {% endfor %}
            {% if (comments[post.id] | length) > 3 %}
                <div id="hidden-comments-{{ post.id }}" style="display: none;">
                    {% for comment in comments[post.id] | slice(3) %}
                        <div class="border-l-2 border-blue-400 pl-4 mb-2 text-sm">
                            <strong class="text-grok-text">{{ comment.handle | default('Anon') }}</strong> - <small class="text-grok-secondary">{{ comment.created_at }}</small>
                            <p>{{ comment.content | safe }}</p>
                        </div>
                    {% endfor %}
                </div>
                <button id="toggle-btn-{{ post.id }}" onclick="window.toggleCommentsExtra({{ post.id }})" class="text-blue-500 underline text-sm">Show more ({{ (comments[post.id] | length) - 3 }} more)</button>
            {% endif %}
        </div>
    {% endif %}
</div>

<script>
if (!window.activityOrder) {
  window.activityOrder = ['trace', 'spell', 'mc', 'sentence', 'math', 'sound'];
}

if (!window.initAllActivities) {
  window.initAllActivities = function() {
    document.querySelectorAll('.card[id^="lesson-"]').forEach(card => {
      const lessonId = card.id.split('-')[1];
      const sections = Array.from(card.querySelectorAll('.activity-section')).filter(s => window.activityOrder.includes(s.dataset.type));
      console.log(`Enabling ${sections.length} activities in lesson ${lessonId}`);
      sections.forEach(section => {
        section.classList.remove('disabled-activity');
        section.style.opacity = '1';
        section.style.pointerEvents = 'auto';
        section.querySelectorAll('input, button, canvas').forEach(el => {
          el.disabled = false;
          el.style.opacity = '1';
        });
        if (section.dataset.type === 'trace') window.initCanvas(lessonId);
      });
      if (card.querySelector('canvas[id^="trace-canvas-"]')) window.initCanvas(lessonId);
    });
  }
}

let popupElements = {}; // Track moved elements

if (!window.toggleTracePopup) {
  window.toggleTracePopup = function(lessonId) {
    const popupId = `trace-popup-${lessonId}`;
    let popup = document.getElementById(popupId);
    if (!popup) return;
    
    if (popup.parentNode !== document.body) {
      // Move to body on first open to escape card clipping
      document.body.appendChild(popup);
      popupElements[lessonId] = popup;
    }
    
    const modal = popup.querySelector('.bg-grok-surface');
    if (popup.classList.contains('popup-closed')) {
      // Open
      document.body.style.overflow = 'hidden';
      popup.classList.remove('popup-closed');
      popup.style.pointerEvents = 'auto';
      setTimeout(() => {
        modal.style.opacity = '1';
        modal.style.transform = 'scale(1)';
      }, 10);
      // Add overlay click handler
      popup.addEventListener('click', function overlayClick(e) {
        if (e.target === popup) {
          window.closeTracePopup(lessonId);
        }
      });
      // Deferred init
      setTimeout(() => window.initCanvas(lessonId), 200);
    } else {
      window.closeTracePopup(lessonId);
    }
  }
}

if (!window.closeTracePopup) {
  window.closeTracePopup = function(lessonId) {
    const popupId = `trace-popup-${lessonId}`;
    const popup = document.getElementById(popupId);
    if (!popup) return;
    
    const modal = popup.querySelector('.bg-grok-surface');
    modal.style.opacity = '0';
    modal.style.transform = 'scale(0.95)';
    setTimeout(() => {
      popup.classList.add('popup-closed');
      popup.style.pointerEvents = 'none';
      document.body.style.overflow = '';
      // Remove overlay handler
      popup.removeEventListener('click', popup._overlayClick);
      // Optional: Move back to original position if needed, but keep in body for perf
    }, 300);
  }
}

if (!window.initCanvas) {
  window.initCanvas = function(lessonId) {
    const canvas = document.getElementById(`trace-canvas-${lessonId}`);
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    ctx.lineWidth = 2;
    ctx.strokeStyle = '#000';
    let drawing = false;

    function startDrawing(e) {
      e.stopPropagation();
      drawing = true;
      const { x, y } = getCoordinates(e);
      ctx.beginPath();
      ctx.moveTo(x, y);
      if (e.type === 'touchstart') e.preventDefault();
    }

    function draw(e) {
      e.stopPropagation();
      if (!drawing) return;
      const { x, y } = getCoordinates(e);
      ctx.lineTo(x, y);
      ctx.stroke();
      if (e.type === 'touchmove') e.preventDefault();
    }

    function endDrawing(e) {
      e.stopPropagation();
      drawing = false;
      if (e.type === 'touchend') e.preventDefault();
    }

    function getCoordinates(e) {
      const rect = canvas.getBoundingClientRect();
      const clientX = e.clientX || (e.touches && e.touches[0].clientX);
      const clientY = e.clientY || (e.touches && e.touches[0].clientY);
      return {
        x: clientX - rect.left,
        y: clientY - rect.top
      };
    }

    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseup', endDrawing);
    canvas.addEventListener('mouseout', endDrawing);

    canvas.addEventListener('touchstart', startDrawing, { passive: false });
    canvas.addEventListener('touchmove', draw, { passive: false });
    canvas.addEventListener('touchend', endDrawing, { passive: false });
    canvas.addEventListener('touchcancel', endDrawing, { passive: false });
  }
}

if (!window.clearCanvas) {
  window.clearCanvas = function(canvasId) {
    const canvas = document.getElementById(canvasId);
    if (canvas) {
      const ctx = canvas.getContext('2d');
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }
  }
}

if (!window.drawShape) {
  window.drawShape = function(lessonId, shape) {
    const canvasId = `trace-canvas-${lessonId}`;
    const canvas = document.getElementById(canvasId);
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    const radius = 50;
    ctx.strokeStyle = document.getElementById(`color-${lessonId}`)?.value || '#000';
    ctx.lineWidth = parseInt(document.getElementById(`width-${lessonId}`)?.value || 3);
    ctx.beginPath();
    if (shape === 'circle') {
      ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
    } else if (shape === 'square') {
      const size = 100;
      ctx.rect(centerX - size/2, centerY - size/2, size, size);
    }
    ctx.stroke();
  }
}

// ... (rest of JS functions remain the same: playClickSound, playAudio, speakQuestion, selectMcOption, submitActivity, likePost, toggleComments, toggleCommentsExtra)

document.addEventListener('DOMContentLoaded', window.initAllActivities);
</script>

<style>
.pulse-border { 
    position: relative; 
    border: 2px solid transparent; 
    border-radius: 0.75rem;
    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7);
    animation: pulse 4s linear infinite;
}
@keyframes pulse { 
    0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7); } 
    70% { box-shadow: 0 0 0 10px rgba(59, 130, 246, 0); } 
    100% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0); } 
}

.popup-closed {
  opacity: 0;
}

@media (max-width: 640px) {
  canvas[id^="trace-canvas-"] {
    width: 100% !important;
    height: 150px !important;
  }
  
  /* Mobile full-screen */
  [id^="trace-popup-"] {
    p-0 !important;
  }
  
  [id^="trace-popup-"] .bg-grok-surface {
    width: 100vw !important;
    height: 100vh !important;
    max-width: none !important;
    max-height: none !important;
    border-radius: 0 !important;
    margin: 0 !important;
  }
}

.mc-btn.selected {
  background-color: #3b82f6 !important;
  color: white !important;
  border-color: #3b82f6 !important;
}
</style>