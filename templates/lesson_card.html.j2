<!-- lesson_card.html.j2 (Updated: Added Font Awesome icons to action buttons: heart for like/unlike, comment for notes, share for share (disabled). For completed lessons, added check icon to the "Completed!" badge. Ensured consistent mr-1 spacing and flex alignment. Preserved all previous updates including MC buttons with sounds/TTS and mobile TTS enhancements.) -->
<div class="card bg-grok-surface border-2 border-blue-400 p-5 rounded-xl shadow-lg hover:-translate-y-1 hover:shadow-xl transition-all duration-200 max-w-lg mx-auto mb-6 {% if post.is_new %}pulse-border bg-blue-50/20{% endif %} {% if post.completed %}opacity-70{% endif %}" id="lesson-{{ post.lesson.id | default(post.id) }}">
    {% if post.completed %}
        <div class="flex justify-end mb-3">
            <span class="bg-green-500 text-white px-3 py-1 rounded-full text-sm font-medium flex items-center">
                <i class="fas fa-check mr-1"></i>Completed!
            </span>
        </div>
    {% endif %}
    <div class="flex items-center mb-3">
        <div class="w-10 h-10 rounded-full bg-blue-500 text-white flex items-center justify-center mr-3 font-bold text-sm shadow-sm">
            
    </div>
    <div class="flex-1">
        <p class="text-grok-text font-semibold">{{ post.lesson.title | default('Untitled Lesson') }} ({{ post.handle | default('User') }})</p>
        <p class="text-grok-secondary text-sm">{{ post.created_at | default('Now') }} â€¢ {{ post.lesson.subject | default('General') | capitalize }}</p>
    </div>
</div>
<p class="text-grok-text mb-4 prose prose-sm max-w-none">{{ post.lesson.description | default('Dive into this interactive lesson!') | safe }}</p>
<div class="space-y-4 mb-4">
    {% if post.lesson.trace_word %}
        <div class="activity-section p-3 bg-blue-50 rounded-lg border border-blue-200 {% if post.completed %}opacity-50 disabled-activity{% endif %}" data-type="trace">
            <h4 class="text-blue-700 font-medium mb-2"> Trace the word: {{ post.lesson.trace_word }}</h4>
            <canvas id="trace-canvas-{{ post.lesson.id | default(post.id) }}" width="400" height="200" class="border border-blue-300 rounded bg-white mb-2 w-full" style="touch-action: none;"></canvas>
            <button type="button" onclick="window.clearCanvas('trace-canvas-{{ post.lesson.id | default(post.id) }}')" class="bg-gray-300 text-grok-text px-3 py-1 rounded-md hover:bg-gray-400 transition mr-2 {% if post.completed %}opacity-50 cursor-not-allowed{% endif %}" {% if post.completed %}disabled{% endif %}>Clear</button>
            <button type="button" onclick="window.submitActivity(event, {{ post.lesson.id | default(post.id) }}, 'trace')" data-type="trace" data-value="drawn" class="check-btn bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition {% if post.completed %}opacity-50 cursor-not-allowed{% endif %}" {% if post.completed %}disabled{% endif %}>Save & Check</button>
        </div>
    {% endif %}
    {% if post.lesson.spell_word %}
        <div class="activity-section p-3 bg-blue-50 rounded-lg border border-blue-200 {% if post.completed %}opacity-50 disabled-activity{% endif %}" data-type="spell">
            <h4 class="text-blue-700 font-medium mb-2"> Spell the word you hear</h4>
            <button type="button" onclick="window.playAudio('{{ post.lesson.spell_word }}')" class="bg-blue-500 text-white px-3 py-1 rounded-md hover:bg-blue-600 transition mr-2 {% if post.completed %}opacity-50 cursor-not-allowed{% endif %}" {% if post.completed %}disabled{% endif %}> Play Sound</button>
            <input id="spell-{{ post.lesson.id | default(post.id) }}" type="text" class="w-full p-2 border border-blue-300 rounded focus:ring-2 focus:ring-blue-500 mt-2 bg-white text-gray-900" placeholder="Type the word here" {% if post.completed %}readonly disabled{% endif %}>
            <button type="button" onclick="window.submitActivity(event, {{ post.lesson.id | default(post.id) }}, 'spell')" data-type="spell" class="check-btn bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 mt-2 transition {% if post.completed %}opacity-50 cursor-not-allowed{% endif %}" {% if post.completed %}disabled{% endif %}>Check</button>
        </div>
    {% endif %}
    {% if post.lesson.mc_question %}
        <div class="activity-section p-3 bg-blue-50 rounded-lg border border-blue-200 {% if post.completed %}opacity-50 disabled-activity{% endif %}" data-type="mc">
            <div class="flex items-center mb-2">
                <h4 class="text-blue-700 font-medium flex-grow">{{ post.lesson.mc_question }}</h4>
                {% if '/' in post.lesson.mc_question %}
                    <button type="button" onclick="window.playAudio('{{ post.lesson.spell_word }}')" class="bg-blue-500 text-white px-3 py-1 rounded-md hover:bg-blue-600 transition {% if post.completed %}opacity-50 cursor-not-allowed{% endif %}" {% if post.completed %}disabled{% endif %}> Play Sound</button>
                {% endif %}
            </div>
            {% set options = (post.lesson.mc_options if post.lesson.mc_options is iterable and not post.lesson.mc_options is string else []) %}
            <input type="hidden" name="mc{{ post.lesson.id | default(post.id) }}" id="mc-hidden-{{ post.lesson.id | default(post.id) }}" value="">
            <div class="space-y-2">
                {% for option in options %}
                    <button type="button" class="mc-btn w-full text-left p-3 border border-grok-border rounded bg-white text-gray-900 hover:bg-grok-accent transition text-grok-text" data-value="{{ option }}" onclick="window.selectMcOption('{{ post.lesson.id | default(post.id) }}', this, '{{ option }}')">
                        <span class="font-semibold">{% if options|length <= 4 %}{{ 'A' if loop.index0 == 0 else 'B' if loop.index0 == 1 else 'C' if loop.index0 == 2 else 'D' }}{% endif %}</span>. {{ option }}
                    </button>
                {% endfor %}
            </div>
            <button type="button" onclick="window.submitActivity(event, {{ post.lesson.id | default(post.id) }}, 'mc')" data-type="mc" class="check-btn bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 mt-2 transition {% if post.completed %}opacity-50 cursor-not-allowed{% endif %}" {% if post.completed %}disabled{% endif %}>Check</button>
        </div>
    {% endif %}
    {% if post.lesson.sentence_question %}
        <div class="activity-section p-3 bg-blue-50 rounded-lg border border-blue-200 {% if post.completed %}opacity-50 disabled-activity{% endif %}" data-type="sentence">
            <h4 class="text-blue-700 font-medium mb-2">{{ post.lesson.sentence_question }}</h4>
            {% set options = (post.lesson.sentence_options if post.lesson.sentence_options is iterable and not post.lesson.sentence_options is string else []) %}
            <input type="hidden" name="sentence{{ post.lesson.id | default(post.id) }}" id="sentence-hidden-{{ post.lesson.id | default(post.id) }}" value="">
            <div class="space-y-2">
                {% for option in options %}
                    <button type="button" class="mc-btn w-full text-left p-3 border border-grok-border rounded bg-white text-gray-900 hover:bg-grok-accent transition text-grok-text" data-value="{{ option }}" onclick="window.selectMcOption('{{ post.lesson.id | default(post.id) }}', this, '{{ option }}', 'sentence')">
                        <span class="font-semibold">{% if options|length <= 4 %}{{ 'A' if loop.index0 == 0 else 'B' if loop.index0 == 1 else 'C' if loop.index0 == 2 else 'D' }}{% endif %}</span>. {{ option }}
                    </button>
                {% endfor %}
            </div>
            <button type="button" onclick="window.submitActivity(event, {{ post.lesson.id | default(post.id) }}, 'sentence')" data-type="sentence" class="check-btn bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 mt-2 transition {% if post.completed %}opacity-50 cursor-not-allowed{% endif %}" {% if post.completed %}disabled{% endif %}>Check</button>
        </div>
    {% endif %}
    {% if post.lesson.math_question %}
        <div class="activity-section p-3 bg-blue-50 rounded-lg border border-blue-200 {% if post.completed %}opacity-50 disabled-activity{% endif %}" data-type="math">
            <h4 class="text-blue-700 font-medium mb-2">{{ post.lesson.math_question }}</h4>
            <input id="math-{{ post.lesson.id | default(post.id) }}" type="text" class="w-full p-2 border border-blue-300 rounded focus:ring-2 focus:ring-blue-500 bg-white text-gray-900" placeholder="Type your answer here" {% if post.completed %}readonly disabled{% endif %}>
            <button type="button" onclick="window.submitActivity(event, {{ post.lesson.id | default(post.id) }}, 'math')" data-type="math" class="check-btn bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 mt-2 transition {% if post.completed %}opacity-50 cursor-not-allowed{% endif %}" {% if post.completed %}disabled{% endif %}>Check</button>
        </div>
    {% endif %}
</div>
<div class="flex justify-between text-grok-secondary mb-4 text-xs">
    <span> {{ post.views or 0 }} views</span>
    <span> {{ post.likes or 0 }} likes</span>
    <span> {{ (comments[post.id] | length) if post.id in comments else 0 }} notes</span>
</div>
<div class="flex justify-between border-t border-blue-300 pt-3 text-sm">
    <button onclick="window.likePost({{ post.id }})" class="text-grok-text hover:text-blue-500 flex items-center {% if post.liked_by_user %}text-blue-500{% endif %}">
        <i class="fas fa-heart mr-1"></i>{{ 'Unlike' if post.liked_by_user else 'Like' }}
    </button>
    <button onclick="window.toggleComments({{ post.id }})" class="text-grok-text hover:text-blue-500 flex items-center">
        <i class="fas fa-comment mr-1"></i>Notes
    </button>
    <button class="text-grok-text flex items-center opacity-50 cursor-not-allowed" disabled>
        <i class="fas fa-share mr-1"></i>Share
    </button>
</div>
<div id="comment-form-{{ post.id }}" style="display: none;" class="mt-3">
    <form method="POST" action="/comment/{{ post.id }}">
        <textarea name="content" placeholder="Add a note..." class="w-full p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 bg-white text-gray-900" required rows="2"></textarea>
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 mt-2">Post Note</button>
    </form>
</div>
{% if post.id in comments %}
    <div class="mt-4">
        <h4 class="text-sm font-semibold text-grok-text mb-2">Notes:</h4>
        {% for comment in (comments[post.id] | sort(attribute='created_at'))[:3] %}
            <div class="border-l-2 border-blue-400 pl-4 mb-2 text-sm">
                <strong class="text-grok-text">{{ comment.handle | default('Anon') }}</strong> - <small class="text-grok-secondary">{{ comment.created_at }}</small>

                {{ comment.content | safe }}
            </div>
        {% endfor %}
        {% if (comments[post.id] | length) > 3 %}
            <div id="hidden-comments-{{ post.id }}" style="display: none;">
                {% for comment in comments[post.id] | slice(3) %}
                    <div class="border-l-2 border-blue-400 pl-4 mb-2 text-sm">
                        <strong class="text-grok-text">{{ comment.handle | default('Anon') }}</strong> - <small class="text-grok-secondary">{{ comment.created_at }}</small>

                        {{ comment.content | safe }}
                    </div>
                {% endfor %}
            </div>
            <button id="toggle-btn-{{ post.id }}" onclick="window.toggleCommentsExtra({{ post.id }})" class="text-blue-500 underline text-sm">Show more ({{ (comments[post.id] | length) - 3 }} more)</button>
        {% endif %}
    </div>
{% endif %}</div>

<script>
if (!window.activityOrder) {
  window.activityOrder = ['trace', 'spell', 'mc', 'sentence', 'math'];
}

if (!window.initAllActivities) {
  window.initAllActivities = function() {
    document.querySelectorAll('.card[id^="lesson-"]').forEach(card => {
      const lessonId = card.id.split('-')[1];
      if (document.getElementById(`lesson-${lessonId}`).classList.contains('opacity-70')) return; // Skip completed lessons
      const sections = Array.from(card.querySelectorAll('.activity-section')).filter(s => window.activityOrder.includes(s.dataset.type));
      sections.slice(1).forEach(section => {
        section.classList.add('disabled-activity');
        section.querySelectorAll('input, button, canvas').forEach(el => el.disabled = true);
      });
      if (sections.length > 0) {
        sections[0].classList.remove('disabled-activity');
        sections[0].querySelectorAll('input, button, canvas').forEach(el => el.disabled = false);
        if (sections[0].dataset.type === 'trace') window.initCanvas(lessonId);
      }
    });
  }
}

if (!window.enableNextActivity) {
  window.enableNextActivity = function(lessonId, currentType) {
    const card = document.getElementById(`lesson-${lessonId}`);
    if (card.classList.contains('opacity-70')) return; // Already completed
    const sections = Array.from(card.querySelectorAll('.activity-section')).filter(s => window.activityOrder.includes(s.dataset.type));
    const currentIndex = sections.findIndex(s => s.dataset.type === currentType);
    if (currentIndex < 0 || currentIndex >= sections.length - 1) return; // No next or last
    const nextSection = sections[currentIndex + 1];
    nextSection.classList.remove('disabled-activity');
    nextSection.querySelectorAll('input, button, canvas').forEach(el => el.disabled = false);
    if (nextSection.dataset.type === 'trace') window.initCanvas(lessonId);
  }
}

if (!window.initCanvas) {
  window.initCanvas = function(lessonId) {
    const canvas = document.getElementById(`trace-canvas-${lessonId}`);
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    ctx.lineWidth = 2;
    ctx.strokeStyle = '#000';
    let drawing = false;

    function startDrawing(e) {
      drawing = true;
      const { x, y } = getCoordinates(e);
      ctx.beginPath();
      ctx.moveTo(x, y);
      // Removed preventDefault from touchstart to allow scroll initiation; handle in touchmove only when drawing
      if (e.type === 'touchstart') e.preventDefault();
    }

    function draw(e) {
      if (!drawing) return;
      const { x, y } = getCoordinates(e);
      ctx.lineTo(x, y);
      ctx.stroke();
      if (e.type === 'touchmove') e.preventDefault(); // Prevent scroll only while actively drawing
    }

    function endDrawing(e) {
      drawing = false;
      if (e.type === 'touchend') e.preventDefault();
    }

    function getCoordinates(e) {
      const rect = canvas.getBoundingClientRect();
      const clientX = e.clientX || (e.touches && e.touches[0].clientX);
      const clientY = e.clientY || (e.touches && e.touches[0].clientY);
      return {
        x: clientX - rect.left,
        y: clientY - rect.top
      };
    }

    // Mouse events
    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseup', endDrawing);
    canvas.addEventListener('mouseout', endDrawing);

    // Touch events
    canvas.addEventListener('touchstart', startDrawing, { passive: false });
    canvas.addEventListener('touchmove', draw, { passive: false });
    canvas.addEventListener('touchend', endDrawing, { passive: false });
    canvas.addEventListener('touchcancel', endDrawing, { passive: false });
  }
}

if (!window.clearCanvas) {
  window.clearCanvas = function(canvasId) {
    const canvas = document.getElementById(canvasId);
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  }
}

if (!window.playClickSound) {
  window.playClickSound = function() {
    if (typeof AudioContext !== 'undefined') {
      try {
        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioCtx.createOscillator();
        const gainNode = audioCtx.createGain();
        oscillator.connect(gainNode);
        gainNode.connect(audioCtx.destination);
        oscillator.frequency.value = 800;
        oscillator.type = 'sine';
        gainNode.gain.setValueAtTime(0.3, audioCtx.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + 0.1);
        oscillator.start(audioCtx.currentTime);
        oscillator.stop(audioCtx.currentTime + 0.1);
      } catch (e) {
        console.warn('Click sound failed:', e);
      }
    }
  }
}

if (!window.playAudio) {
  window.playAudio = function(word) {
    if ('speechSynthesis' in window) {
      try {
        const utterance = new SpeechSynthesisUtterance(word);
        utterance.onerror = function(e) {
          console.warn('TTS error:', e);
        };
        speechSynthesis.speak(utterance);
      } catch (e) {
        console.warn('TTS failed:', e);
      }
    } else {
      console.warn('TTS not supported');
    }
  }
}

if (!window.selectMcOption) {
  window.selectMcOption = function(lessonId, btn, value, type = 'mc') {
    const section = document.querySelector(`#lesson-${lessonId} .activity-section[data-type="${type}"]`);
    if (section.classList.contains('disabled-activity')) return;
    const buttons = section.querySelectorAll('.mc-btn');
    buttons.forEach(b => {
      b.classList.remove('selected');
      b.style.backgroundColor = '';
      b.style.color = '';
    });
    btn.classList.add('selected');
    btn.style.backgroundColor = '#3b82f6';
    btn.style.color = 'white';
    const hiddenId = `${type}-hidden-${lessonId}`;
    const hidden = document.getElementById(hiddenId);
    if (hidden) hidden.value = value;
    window.playClickSound();
    window.playAudio(value.toLowerCase());
  }
}

if (!window.submitActivity) {
  window.submitActivity = function(event, lessonId, activityType) {
    console.log(`submitActivity called for lesson ${lessonId}, activity ${activityType}`);
    if (!lessonId) {
      console.error('Missing lessonId');
      alert('Error: Missing lesson ID. Please reload.');
      return;
    }
    if (!activityType) {
      console.error('Missing activityType');
      alert('Error: Missing activity type. Please reload.');
      return;
    }
    if (document.getElementById(`lesson-${lessonId}`).classList.contains('opacity-70')) {
      console.log(`Lesson ${lessonId} is completed, exiting`);
      return;
    }
    const section = document.querySelector(`#lesson-${lessonId} .activity-section[data-type="${activityType}"]`);
    if (!section) {
      console.error(`No section found for activity ${activityType}`);
      alert('Error: Activity not found!');
      return;
    }
    if (section.classList.contains('disabled-activity')) {
      console.log(`Activity ${activityType} is disabled, skipping`);
      return;
    }
    const btn = section.querySelector('.check-btn');
    let answer = '';
    if (activityType === 'trace') {
      answer = 'drawn'; // Mark as drawn by default
    } else if (activityType === 'spell' || activityType === 'math') {
      answer = section.querySelector('input[type="text"]')?.value || '';
    } else if (activityType === 'mc' || activityType === 'sentence') {
      const hiddenId = `${activityType}-hidden-${lessonId}`;
      const hidden = document.getElementById(hiddenId);
      answer = hidden ? hidden.value : '';
    }
    if (!answer.trim()) {
      console.log(`No valid answer for ${activityType}`);
      alert('Please select or enter an answer!');
      return;
    }
    const payload = { lesson_id: lessonId, activity_type: activityType, answer };
    console.log(`Sending to /check_lesson:`, payload);
    fetch('/check_lesson', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify(payload)
    })
    .then(r => {
      console.log(`Response status: ${r.status}`);
      if (!r.ok) {
        return r.text().then(text => { throw new Error(`HTTP ${r.status}: ${text}`); });
      }
      return r.json();
    })
    .then(d => {
      console.log('Response data:', d);
      if (d.success) {
        const msg = d.correct ? `Correct! +${d.points} points ` : 'Try again! ';
        alert(msg);
        if (d.correct) {
          section.style.backgroundColor = '#dbeafe';
          btn.textContent = 'Done! ';
          btn.disabled = true;
          window.enableNextActivity(lessonId, activityType);
          if (d.lesson_completed) {
            document.getElementById(`lesson-${lessonId}`).classList.add('opacity-70');
            document.getElementById(`lesson-${lessonId}`).querySelectorAll('.check-btn, input, canvas').forEach(el => el.disabled = true);
          }
        }
      } else {
        alert(d.error || 'Check failed');
      }
    })
    .catch(e => {
      console.error('Submit error:', e);
      alert(`Oopsâ€”${e.message}. Reload and try again!`);
    });
  }
}

if (!window.likePost) {
  window.likePost = function(postId) {
    console.log(`likePost called for post ${postId}`);
    fetch(`/like/${postId}`, {method: 'POST'})
      .then(r => r.json())
      .then(d => {
        if (d.success) location.reload();
        else alert(d.error);
      })
      .catch(e => console.error('Like error:', e));
  }
}

if (!window.toggleComments) {
  window.toggleComments = function(postId) {
    console.log(`toggleComments called for post ${postId}`);
    const form = document.getElementById(`comment-form-${postId}`);
    form.style.display = form.style.display === 'none' ? 'block' : 'none';
  }
}

if (!window.toggleCommentsExtra) {
  window.toggleCommentsExtra = function(postId) {
    console.log(`toggleCommentsExtra called for post ${postId}`);
    const hidden = document.getElementById(`hidden-comments-${postId}`);
    const btn = document.getElementById(`toggle-btn-${postId}`);
    if (hidden.style.display === 'none') {
      hidden.style.display = 'block';
      btn.textContent = 'Show less';
    } else {
      hidden.style.display = 'none';
      btn.textContent = `Show more (${hidden.children.length} more)`;
    }
  }
}

document.addEventListener('DOMContentLoaded', window.initAllActivities);
</script>

<style>
.pulse-border { 
    position: relative; 
    border: 2px solid transparent; 
    border-radius: 0.75rem;
    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7);
    animation: pulse 4s linear infinite;
}
@keyframes pulse { 
    0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7); } 
    70% { box-shadow: 0 0 0 10px rgba(59, 130, 246, 0); } 
    100% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0); } 
}

@media (max-width: 640px) {
  canvas[id^="trace-canvas-"] {
    width: 100% !important;
    height: 150px !important;
  }
}

.disabled-activity {
    opacity: 0.5;
    pointer-events: none;
}

.mc-btn.selected {
  background-color: #3b82f6 !important;
  color: white !important;
  border-color: #3b82f6 !important;
}
</style>

